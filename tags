!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
A	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	A        []string \/\/ First sequence lines$/;"	m	struct:difflib.UnifiedDiff	typeref:typename:[]string
A	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	A    int$/;"	m	struct:difflib.Match	typeref:typename:int
API documentation	vendor/gopkg.in/yaml.v3/README.md	/^API documentation$/;"	s
API stability	vendor/gopkg.in/yaml.v3/README.md	/^API stability$/;"	s
Alias	vendor/gopkg.in/yaml.v3/yaml.go	/^	Alias *Node$/;"	m	struct:yaml.Node	typeref:typename:*Node
AliasNode	vendor/gopkg.in/yaml.v3/yaml.go	/^	AliasNode$/;"	c	package:yaml
AnError	vendor/github.com/stretchr/testify/assert/errors.go	/^var AnError = errors.New("assert.AnError general error for testing")$/;"	v	package:assert
Anchor	vendor/gopkg.in/yaml.v3/yaml.go	/^	Anchor string$/;"	m	struct:yaml.Node	typeref:typename:string
Assertions	vendor/github.com/stretchr/testify/assert/forward_assertions.go	/^type Assertions struct {$/;"	s	package:assert
B	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	B        []string \/\/ Second sequence lines$/;"	m	struct:difflib.UnifiedDiff	typeref:typename:[]string
B	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	B    int$/;"	m	struct:difflib.Match	typeref:typename:int
BoolAssertionFunc	vendor/github.com/stretchr/testify/assert/assertions.go	/^type BoolAssertionFunc func(TestingT, bool, ...interface{}) bool$/;"	t	package:assert
CallerInfo	vendor/github.com/stretchr/testify/assert/assertions.go	/^func CallerInfo() []string {$/;"	f	package:assert	typeref:typename:[]string
Close	vendor/gopkg.in/yaml.v3/yaml.go	/^func (e *Encoder) Close() (err error) {$/;"	f	unknown:yaml.Encoder	typeref:typename:(err error)
Column	vendor/gopkg.in/yaml.v3/yaml.go	/^	Column int$/;"	m	struct:yaml.Node	typeref:typename:int
CompareType	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^type CompareType int$/;"	t	package:assert
Comparison	vendor/github.com/stretchr/testify/assert/assertions.go	/^type Comparison func() (success bool)$/;"	t	package:assert
ComparisonAssertionFunc	vendor/github.com/stretchr/testify/assert/assertions.go	/^type ComparisonAssertionFunc func(TestingT, interface{}, interface{}, ...interface{}) bool$/;"	t	package:assert
Compatibility	vendor/gopkg.in/yaml.v3/README.md	/^Compatibility$/;"	s
Condition	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Condition(comp Comparison, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Condition	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Condition(t TestingT, comp Comparison, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Conditionf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Conditionf(t TestingT, comp Comparison, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Conditionf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Conditionf(comp Comparison, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Config	vendor/github.com/davecgh/go-spew/spew/config.go	/^var Config = ConfigState{Indent: " "}$/;"	v	package:spew
ConfigState	vendor/github.com/davecgh/go-spew/spew/config.go	/^type ConfigState struct {$/;"	s	package:spew
Contains	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Contains(s interface{}, contains interface{}, msgAndArgs ...interface{}) bo/;"	f	unknown:assert.Assertions	typeref:typename:bool
Contains	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Contains(t TestingT, s, contains interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Containsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Containsf(t TestingT, s interface{}, contains interface{}, msg string, args ...interface{})/;"	f	package:assert	typeref:typename:bool
Containsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Containsf(s interface{}, contains interface{}, msg string, args ...interfac/;"	f	unknown:assert.Assertions	typeref:typename:bool
Content	vendor/gopkg.in/yaml.v3/yaml.go	/^	Content []*Node$/;"	m	struct:yaml.Node	typeref:typename:[]*Node
Context	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	Context  int      \/\/ Number of context lines$/;"	m	struct:difflib.UnifiedDiff	typeref:typename:int
ContextDiff	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^type ContextDiff UnifiedDiff$/;"	t	package:difflib
ContinueOnMethod	vendor/github.com/davecgh/go-spew/spew/config.go	/^	ContinueOnMethod bool$/;"	m	struct:spew.ConfigState	typeref:typename:bool
Decode	vendor/gopkg.in/yaml.v3/yaml.go	/^func (dec *Decoder) Decode(v interface{}) (err error) {$/;"	f	unknown:yaml.Decoder	typeref:typename:(err error)
Decode	vendor/gopkg.in/yaml.v3/yaml.go	/^func (n *Node) Decode(v interface{}) (err error) {$/;"	f	unknown:yaml.Node	typeref:typename:(err error)
Decoder	vendor/gopkg.in/yaml.v3/yaml.go	/^type Decoder struct {$/;"	s	package:yaml
DirExists	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) DirExists(path string, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
DirExists	vendor/github.com/stretchr/testify/assert/assertions.go	/^func DirExists(t TestingT, path string, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
DirExistsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func DirExistsf(t TestingT, path string, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
DirExistsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) DirExistsf(path string, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
DisableCapacities	vendor/github.com/davecgh/go-spew/spew/config.go	/^	DisableCapacities bool$/;"	m	struct:spew.ConfigState	typeref:typename:bool
DisableMethods	vendor/github.com/davecgh/go-spew/spew/config.go	/^	DisableMethods bool$/;"	m	struct:spew.ConfigState	typeref:typename:bool
DisablePointerAddresses	vendor/github.com/davecgh/go-spew/spew/config.go	/^	DisablePointerAddresses bool$/;"	m	struct:spew.ConfigState	typeref:typename:bool
DisablePointerMethods	vendor/github.com/davecgh/go-spew/spew/config.go	/^	DisablePointerMethods bool$/;"	m	struct:spew.ConfigState	typeref:typename:bool
DocumentNode	vendor/gopkg.in/yaml.v3/yaml.go	/^	DocumentNode Kind = 1 << iota$/;"	c	package:yaml
DoubleQuotedStyle	vendor/gopkg.in/yaml.v3/yaml.go	/^	DoubleQuotedStyle$/;"	c	package:yaml
Dump	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Dump(a ...interface{}) {$/;"	f	unknown:spew.ConfigState
Dump	vendor/github.com/davecgh/go-spew/spew/dump.go	/^func Dump(a ...interface{}) {$/;"	f	package:spew
ElementsMatch	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) ElementsMatch(listA interface{}, listB interface{}, msgAndArgs ...interface/;"	f	unknown:assert.Assertions	typeref:typename:bool
ElementsMatch	vendor/github.com/stretchr/testify/assert/assertions.go	/^func ElementsMatch(t TestingT, listA, listB interface{}, msgAndArgs ...interface{}) (ok bool) {$/;"	f	package:assert	typeref:typename:(ok bool)
ElementsMatchf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func ElementsMatchf(t TestingT, listA interface{}, listB interface{}, msg string, args ...interf/;"	f	package:assert	typeref:typename:bool
ElementsMatchf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) ElementsMatchf(listA interface{}, listB interface{}, msg string, args ...in/;"	f	unknown:assert.Assertions	typeref:typename:bool
Empty	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Empty(object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Empty	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Empty(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Emptyf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Emptyf(t TestingT, object interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Emptyf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Emptyf(object interface{}, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Encode	vendor/gopkg.in/yaml.v3/yaml.go	/^func (e *Encoder) Encode(v interface{}) (err error) {$/;"	f	unknown:yaml.Encoder	typeref:typename:(err error)
Encode	vendor/gopkg.in/yaml.v3/yaml.go	/^func (n *Node) Encode(v interface{}) (err error) {$/;"	f	unknown:yaml.Node	typeref:typename:(err error)
Encoder	vendor/gopkg.in/yaml.v3/yaml.go	/^type Encoder struct {$/;"	s	package:yaml
Eol	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	Eol      string   \/\/ Headers end of line, defaults to LF$/;"	m	struct:difflib.UnifiedDiff	typeref:typename:string
Equal	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Equal(expected interface{}, actual interface{}, msgAndArgs ...interface{}) /;"	f	unknown:assert.Assertions	typeref:typename:bool
Equal	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Equal(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
EqualError	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) EqualError(theError error, errString string, msgAndArgs ...interface{}) boo/;"	f	unknown:assert.Assertions	typeref:typename:bool
EqualError	vendor/github.com/stretchr/testify/assert/assertions.go	/^func EqualError(t TestingT, theError error, errString string, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
EqualErrorf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func EqualErrorf(t TestingT, theError error, errString string, msg string, args ...interface{}) /;"	f	package:assert	typeref:typename:bool
EqualErrorf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) EqualErrorf(theError error, errString string, msg string, args ...interface/;"	f	unknown:assert.Assertions	typeref:typename:bool
EqualValues	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) EqualValues(expected interface{}, actual interface{}, msgAndArgs ...interfa/;"	f	unknown:assert.Assertions	typeref:typename:bool
EqualValues	vendor/github.com/stretchr/testify/assert/assertions.go	/^func EqualValues(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
EqualValuesf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func EqualValuesf(t TestingT, expected interface{}, actual interface{}, msg string, args ...inte/;"	f	package:assert	typeref:typename:bool
EqualValuesf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) EqualValuesf(expected interface{}, actual interface{}, msg string, args .../;"	f	unknown:assert.Assertions	typeref:typename:bool
Equalf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Equalf(t TestingT, expected interface{}, actual interface{}, msg string, args ...interface{/;"	f	package:assert	typeref:typename:bool
Equalf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Equalf(expected interface{}, actual interface{}, msg string, args ...interf/;"	f	unknown:assert.Assertions	typeref:typename:bool
Error	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Error(err error, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Error	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Error(t TestingT, err error, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Error	vendor/gopkg.in/yaml.v3/yaml.go	/^func (e *TypeError) Error() string {$/;"	f	unknown:yaml.TypeError	typeref:typename:string
ErrorAs	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) ErrorAs(err error, target interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
ErrorAs	vendor/github.com/stretchr/testify/assert/assertions.go	/^func ErrorAs(t TestingT, err error, target interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
ErrorAsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func ErrorAsf(t TestingT, err error, target interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
ErrorAsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) ErrorAsf(err error, target interface{}, msg string, args ...interface{}) bo/;"	f	unknown:assert.Assertions	typeref:typename:bool
ErrorAssertionFunc	vendor/github.com/stretchr/testify/assert/assertions.go	/^type ErrorAssertionFunc func(TestingT, error, ...interface{}) bool$/;"	t	package:assert
ErrorIs	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) ErrorIs(err error, target error, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
ErrorIs	vendor/github.com/stretchr/testify/assert/assertions.go	/^func ErrorIs(t TestingT, err, target error, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
ErrorIsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func ErrorIsf(t TestingT, err error, target error, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
ErrorIsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) ErrorIsf(err error, target error, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Errorf	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Errorf(format string, a ...interface{}) (err error) {$/;"	f	unknown:spew.ConfigState	typeref:typename:(err error)
Errorf	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func Errorf(format string, a ...interface{}) (err error) {$/;"	f	package:spew	typeref:typename:(err error)
Errorf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Errorf(t TestingT, err error, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Errorf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Errorf(err error, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Errors	vendor/gopkg.in/yaml.v3/yaml.go	/^	Errors []string$/;"	m	struct:yaml.TypeError	typeref:typename:[]string
Eventually	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Eventually(condition func() bool, waitFor time.Duration, tick time.Duration/;"	f	unknown:assert.Assertions	typeref:typename:bool
Eventually	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Eventually(t TestingT, condition func() bool, waitFor time.Duration, tick time.Duration, ms/;"	f	package:assert	typeref:typename:bool
Eventuallyf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Eventuallyf(t TestingT, condition func() bool, waitFor time.Duration, tick time.Duration, m/;"	f	package:assert	typeref:typename:bool
Eventuallyf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Eventuallyf(condition func() bool, waitFor time.Duration, tick time.Duratio/;"	f	unknown:assert.Assertions	typeref:typename:bool
Exactly	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Exactly(expected interface{}, actual interface{}, msgAndArgs ...interface{}/;"	f	unknown:assert.Assertions	typeref:typename:bool
Exactly	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Exactly(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Exactlyf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Exactlyf(t TestingT, expected interface{}, actual interface{}, msg string, args ...interfac/;"	f	package:assert	typeref:typename:bool
Exactlyf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Exactlyf(expected interface{}, actual interface{}, msg string, args ...inte/;"	f	unknown:assert.Assertions	typeref:typename:bool
Example	README.md	/^## Example$/;"	s
Example	vendor/gopkg.in/yaml.v3/README.md	/^Example$/;"	s
Fail	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Fail(failureMessage string, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Fail	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Fail(t TestingT, failureMessage string, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
FailNow	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) FailNow(failureMessage string, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
FailNow	vendor/github.com/stretchr/testify/assert/assertions.go	/^func FailNow(t TestingT, failureMessage string, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
FailNowf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func FailNowf(t TestingT, failureMessage string, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
FailNowf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) FailNowf(failureMessage string, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Failf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Failf(t TestingT, failureMessage string, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Failf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Failf(failureMessage string, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
False	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) False(value bool, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
False	vendor/github.com/stretchr/testify/assert/assertions.go	/^func False(t TestingT, value bool, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Falsef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Falsef(t TestingT, value bool, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Falsef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Falsef(value bool, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Fdump	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Fdump(w io.Writer, a ...interface{}) {$/;"	f	unknown:spew.ConfigState
Fdump	vendor/github.com/davecgh/go-spew/spew/dump.go	/^func Fdump(w io.Writer, a ...interface{}) {$/;"	f	package:spew
FieldsList	vendor/gopkg.in/yaml.v3/yaml.go	/^	FieldsList []fieldInfo$/;"	m	struct:yaml.structInfo	typeref:typename:[]fieldInfo
FieldsMap	vendor/gopkg.in/yaml.v3/yaml.go	/^	FieldsMap  map[string]fieldInfo$/;"	m	struct:yaml.structInfo	typeref:typename:map[string]fieldInfo
FileExists	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) FileExists(path string, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
FileExists	vendor/github.com/stretchr/testify/assert/assertions.go	/^func FileExists(t TestingT, path string, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
FileExistsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func FileExistsf(t TestingT, path string, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
FileExistsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) FileExistsf(path string, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Flow	vendor/gopkg.in/yaml.v3/yaml.go	/^	Flow      bool$/;"	m	struct:yaml.fieldInfo	typeref:typename:bool
FlowStyle	vendor/gopkg.in/yaml.v3/yaml.go	/^	FlowStyle$/;"	c	package:yaml
FoldedStyle	vendor/gopkg.in/yaml.v3/yaml.go	/^	FoldedStyle$/;"	c	package:yaml
FootComment	vendor/gopkg.in/yaml.v3/yaml.go	/^	FootComment string$/;"	m	struct:yaml.Node	typeref:typename:string
Format	vendor/github.com/davecgh/go-spew/spew/format.go	/^func (f *formatState) Format(fs fmt.State, verb rune) {$/;"	f	unknown:spew.formatState
Fprint	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Fprint(w io.Writer, a ...interface{}) (n int, err error) {$/;"	f	unknown:spew.ConfigState	typeref:typename:(n int, err error)
Fprint	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func Fprint(w io.Writer, a ...interface{}) (n int, err error) {$/;"	f	package:spew	typeref:typename:(n int, err error)
Fprintf	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) {$/;"	f	unknown:spew.ConfigState	typeref:typename:(n int, err error)
Fprintf	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) {$/;"	f	package:spew	typeref:typename:(n int, err error)
Fprintln	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Fprintln(w io.Writer, a ...interface{}) (n int, err error) {$/;"	f	unknown:spew.ConfigState	typeref:typename:(n int, err error)
Fprintln	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func Fprintln(w io.Writer, a ...interface{}) (n int, err error) {$/;"	f	package:spew	typeref:typename:(n int, err error)
FromDate	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	FromDate string   \/\/ First file time$/;"	m	struct:difflib.UnifiedDiff	typeref:typename:string
FromFile	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	FromFile string   \/\/ First file name$/;"	m	struct:difflib.UnifiedDiff	typeref:typename:string
GetContextDiffString	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func GetContextDiffString(diff ContextDiff) (string, error) {$/;"	f	package:difflib	typeref:typename:(string, error)
GetGroupedOpCodes	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) GetGroupedOpCodes(n int) [][]OpCode {$/;"	f	unknown:difflib.SequenceMatcher	typeref:typename:[][]OpCode
GetMatchingBlocks	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) GetMatchingBlocks() []Match {$/;"	f	unknown:difflib.SequenceMatcher	typeref:typename:[]Match
GetOpCodes	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) GetOpCodes() []OpCode {$/;"	f	unknown:difflib.SequenceMatcher	typeref:typename:[]OpCode
GetUnifiedDiffString	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func GetUnifiedDiffString(diff UnifiedDiff) (string, error) {$/;"	f	package:difflib	typeref:typename:(string, error)
Greater	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^func Greater(t TestingT, e1 interface{}, e2 interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Greater	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Greater(e1 interface{}, e2 interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
GreaterOrEqual	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^func GreaterOrEqual(t TestingT, e1 interface{}, e2 interface{}, msgAndArgs ...interface{}) bool /;"	f	package:assert	typeref:typename:bool
GreaterOrEqual	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) GreaterOrEqual(e1 interface{}, e2 interface{}, msgAndArgs ...interface{}) b/;"	f	unknown:assert.Assertions	typeref:typename:bool
GreaterOrEqualf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func GreaterOrEqualf(t TestingT, e1 interface{}, e2 interface{}, msg string, args ...interface{}/;"	f	package:assert	typeref:typename:bool
GreaterOrEqualf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) GreaterOrEqualf(e1 interface{}, e2 interface{}, msg string, args ...interfa/;"	f	unknown:assert.Assertions	typeref:typename:bool
Greaterf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Greaterf(t TestingT, e1 interface{}, e2 interface{}, msg string, args ...interface{}) bool /;"	f	package:assert	typeref:typename:bool
Greaterf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Greaterf(e1 interface{}, e2 interface{}, msg string, args ...interface{}) b/;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPBody	vendor/github.com/stretchr/testify/assert/http_assertions.go	/^func HTTPBody(handler http.HandlerFunc, method, url string, values url.Values) string {$/;"	f	package:assert	typeref:typename:string
HTTPBodyContains	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPBodyContains(handler http.HandlerFunc, method string, url string, value/;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPBodyContains	vendor/github.com/stretchr/testify/assert/http_assertions.go	/^func HTTPBodyContains(t TestingT, handler http.HandlerFunc, method, url string, values url.Value/;"	f	package:assert	typeref:typename:bool
HTTPBodyContainsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func HTTPBodyContainsf(t TestingT, handler http.HandlerFunc, method string, url string, values u/;"	f	package:assert	typeref:typename:bool
HTTPBodyContainsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPBodyContainsf(handler http.HandlerFunc, method string, url string, valu/;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPBodyNotContains	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPBodyNotContains(handler http.HandlerFunc, method string, url string, va/;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPBodyNotContains	vendor/github.com/stretchr/testify/assert/http_assertions.go	/^func HTTPBodyNotContains(t TestingT, handler http.HandlerFunc, method, url string, values url.Va/;"	f	package:assert	typeref:typename:bool
HTTPBodyNotContainsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func HTTPBodyNotContainsf(t TestingT, handler http.HandlerFunc, method string, url string, value/;"	f	package:assert	typeref:typename:bool
HTTPBodyNotContainsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPBodyNotContainsf(handler http.HandlerFunc, method string, url string, v/;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPError	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPError(handler http.HandlerFunc, method string, url string, values url.V/;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPError	vendor/github.com/stretchr/testify/assert/http_assertions.go	/^func HTTPError(t TestingT, handler http.HandlerFunc, method, url string, values url.Values, msgA/;"	f	package:assert	typeref:typename:bool
HTTPErrorf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func HTTPErrorf(t TestingT, handler http.HandlerFunc, method string, url string, values url.Valu/;"	f	package:assert	typeref:typename:bool
HTTPErrorf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPErrorf(handler http.HandlerFunc, method string, url string, values url./;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPRedirect	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPRedirect(handler http.HandlerFunc, method string, url string, values ur/;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPRedirect	vendor/github.com/stretchr/testify/assert/http_assertions.go	/^func HTTPRedirect(t TestingT, handler http.HandlerFunc, method, url string, values url.Values, m/;"	f	package:assert	typeref:typename:bool
HTTPRedirectf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func HTTPRedirectf(t TestingT, handler http.HandlerFunc, method string, url string, values url.V/;"	f	package:assert	typeref:typename:bool
HTTPRedirectf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPRedirectf(handler http.HandlerFunc, method string, url string, values u/;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPStatusCode	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPStatusCode(handler http.HandlerFunc, method string, url string, values /;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPStatusCode	vendor/github.com/stretchr/testify/assert/http_assertions.go	/^func HTTPStatusCode(t TestingT, handler http.HandlerFunc, method, url string, values url.Values,/;"	f	package:assert	typeref:typename:bool
HTTPStatusCodef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func HTTPStatusCodef(t TestingT, handler http.HandlerFunc, method string, url string, values url/;"	f	package:assert	typeref:typename:bool
HTTPStatusCodef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPStatusCodef(handler http.HandlerFunc, method string, url string, values/;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPSuccess	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPSuccess(handler http.HandlerFunc, method string, url string, values url/;"	f	unknown:assert.Assertions	typeref:typename:bool
HTTPSuccess	vendor/github.com/stretchr/testify/assert/http_assertions.go	/^func HTTPSuccess(t TestingT, handler http.HandlerFunc, method, url string, values url.Values, ms/;"	f	package:assert	typeref:typename:bool
HTTPSuccessf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func HTTPSuccessf(t TestingT, handler http.HandlerFunc, method string, url string, values url.Va/;"	f	package:assert	typeref:typename:bool
HTTPSuccessf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) HTTPSuccessf(handler http.HandlerFunc, method string, url string, values ur/;"	f	unknown:assert.Assertions	typeref:typename:bool
HeadComment	vendor/gopkg.in/yaml.v3/yaml.go	/^	HeadComment string$/;"	m	struct:yaml.Node	typeref:typename:string
I1	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	I1  int$/;"	m	struct:difflib.OpCode	typeref:typename:int
I2	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	I2  int$/;"	m	struct:difflib.OpCode	typeref:typename:int
Id	vendor/gopkg.in/yaml.v3/yaml.go	/^	Id int$/;"	m	struct:yaml.fieldInfo	typeref:typename:int
Implements	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Implements(interfaceObject interface{}, object interface{}, msgAndArgs ...i/;"	f	unknown:assert.Assertions	typeref:typename:bool
Implements	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Implements(t TestingT, interfaceObject interface{}, object interface{}, msgAndArgs ...inter/;"	f	package:assert	typeref:typename:bool
Implementsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Implementsf(t TestingT, interfaceObject interface{}, object interface{}, msg string, args ./;"	f	package:assert	typeref:typename:bool
Implementsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Implementsf(interfaceObject interface{}, object interface{}, msg string, ar/;"	f	unknown:assert.Assertions	typeref:typename:bool
InDelta	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) InDelta(expected interface{}, actual interface{}, delta float64, msgAndArgs/;"	f	unknown:assert.Assertions	typeref:typename:bool
InDelta	vendor/github.com/stretchr/testify/assert/assertions.go	/^func InDelta(t TestingT, expected, actual interface{}, delta float64, msgAndArgs ...interface{})/;"	f	package:assert	typeref:typename:bool
InDeltaMapValues	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) InDeltaMapValues(expected interface{}, actual interface{}, delta float64, m/;"	f	unknown:assert.Assertions	typeref:typename:bool
InDeltaMapValues	vendor/github.com/stretchr/testify/assert/assertions.go	/^func InDeltaMapValues(t TestingT, expected, actual interface{}, delta float64, msgAndArgs ...int/;"	f	package:assert	typeref:typename:bool
InDeltaMapValuesf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func InDeltaMapValuesf(t TestingT, expected interface{}, actual interface{}, delta float64, msg /;"	f	package:assert	typeref:typename:bool
InDeltaMapValuesf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) InDeltaMapValuesf(expected interface{}, actual interface{}, delta float64, /;"	f	unknown:assert.Assertions	typeref:typename:bool
InDeltaSlice	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) InDeltaSlice(expected interface{}, actual interface{}, delta float64, msgAn/;"	f	unknown:assert.Assertions	typeref:typename:bool
InDeltaSlice	vendor/github.com/stretchr/testify/assert/assertions.go	/^func InDeltaSlice(t TestingT, expected, actual interface{}, delta float64, msgAndArgs ...interfa/;"	f	package:assert	typeref:typename:bool
InDeltaSlicef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func InDeltaSlicef(t TestingT, expected interface{}, actual interface{}, delta float64, msg stri/;"	f	package:assert	typeref:typename:bool
InDeltaSlicef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) InDeltaSlicef(expected interface{}, actual interface{}, delta float64, msg /;"	f	unknown:assert.Assertions	typeref:typename:bool
InDeltaf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func InDeltaf(t TestingT, expected interface{}, actual interface{}, delta float64, msg string, a/;"	f	package:assert	typeref:typename:bool
InDeltaf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) InDeltaf(expected interface{}, actual interface{}, delta float64, msg strin/;"	f	unknown:assert.Assertions	typeref:typename:bool
InEpsilon	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) InEpsilon(expected interface{}, actual interface{}, epsilon float64, msgAnd/;"	f	unknown:assert.Assertions	typeref:typename:bool
InEpsilon	vendor/github.com/stretchr/testify/assert/assertions.go	/^func InEpsilon(t TestingT, expected, actual interface{}, epsilon float64, msgAndArgs ...interfac/;"	f	package:assert	typeref:typename:bool
InEpsilonSlice	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) InEpsilonSlice(expected interface{}, actual interface{}, epsilon float64, m/;"	f	unknown:assert.Assertions	typeref:typename:bool
InEpsilonSlice	vendor/github.com/stretchr/testify/assert/assertions.go	/^func InEpsilonSlice(t TestingT, expected, actual interface{}, epsilon float64, msgAndArgs ...int/;"	f	package:assert	typeref:typename:bool
InEpsilonSlicef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func InEpsilonSlicef(t TestingT, expected interface{}, actual interface{}, epsilon float64, msg /;"	f	package:assert	typeref:typename:bool
InEpsilonSlicef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) InEpsilonSlicef(expected interface{}, actual interface{}, epsilon float64, /;"	f	unknown:assert.Assertions	typeref:typename:bool
InEpsilonf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func InEpsilonf(t TestingT, expected interface{}, actual interface{}, epsilon float64, msg strin/;"	f	package:assert	typeref:typename:bool
InEpsilonf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) InEpsilonf(expected interface{}, actual interface{}, epsilon float64, msg s/;"	f	unknown:assert.Assertions	typeref:typename:bool
Indent	vendor/github.com/davecgh/go-spew/spew/config.go	/^	Indent string$/;"	m	struct:spew.ConfigState	typeref:typename:string
Inline	vendor/gopkg.in/yaml.v3/yaml.go	/^	Inline []int$/;"	m	struct:yaml.fieldInfo	typeref:typename:[]int
InlineMap	vendor/gopkg.in/yaml.v3/yaml.go	/^	InlineMap int$/;"	m	struct:yaml.structInfo	typeref:typename:int
InlineUnmarshalers	vendor/gopkg.in/yaml.v3/yaml.go	/^	InlineUnmarshalers [][]int$/;"	m	struct:yaml.structInfo	typeref:typename:[][]int
Installation and usage	vendor/gopkg.in/yaml.v3/README.md	/^Installation and usage$/;"	s
Introduction	vendor/gopkg.in/yaml.v3/README.md	/^Introduction$/;"	s
IsDecreasing	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) IsDecreasing(object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
IsDecreasing	vendor/github.com/stretchr/testify/assert/assertion_order.go	/^func IsDecreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
IsDecreasingf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func IsDecreasingf(t TestingT, object interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
IsDecreasingf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) IsDecreasingf(object interface{}, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
IsIncreasing	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) IsIncreasing(object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
IsIncreasing	vendor/github.com/stretchr/testify/assert/assertion_order.go	/^func IsIncreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
IsIncreasingf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func IsIncreasingf(t TestingT, object interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
IsIncreasingf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) IsIncreasingf(object interface{}, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
IsJunk	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	IsJunk         func(string) bool$/;"	m	struct:difflib.SequenceMatcher	typeref:typename:func(string) bool
IsNonDecreasing	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) IsNonDecreasing(object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
IsNonDecreasing	vendor/github.com/stretchr/testify/assert/assertion_order.go	/^func IsNonDecreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
IsNonDecreasingf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func IsNonDecreasingf(t TestingT, object interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
IsNonDecreasingf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) IsNonDecreasingf(object interface{}, msg string, args ...interface{}) bool /;"	f	unknown:assert.Assertions	typeref:typename:bool
IsNonIncreasing	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) IsNonIncreasing(object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
IsNonIncreasing	vendor/github.com/stretchr/testify/assert/assertion_order.go	/^func IsNonIncreasing(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
IsNonIncreasingf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func IsNonIncreasingf(t TestingT, object interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
IsNonIncreasingf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) IsNonIncreasingf(object interface{}, msg string, args ...interface{}) bool /;"	f	unknown:assert.Assertions	typeref:typename:bool
IsType	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) IsType(expectedType interface{}, object interface{}, msgAndArgs ...interfac/;"	f	unknown:assert.Assertions	typeref:typename:bool
IsType	vendor/github.com/stretchr/testify/assert/assertions.go	/^func IsType(t TestingT, expectedType interface{}, object interface{}, msgAndArgs ...interface{})/;"	f	package:assert	typeref:typename:bool
IsTypef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func IsTypef(t TestingT, expectedType interface{}, object interface{}, msg string, args ...inter/;"	f	package:assert	typeref:typename:bool
IsTypef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) IsTypef(expectedType interface{}, object interface{}, msg string, args ...i/;"	f	unknown:assert.Assertions	typeref:typename:bool
IsZero	vendor/gopkg.in/yaml.v3/yaml.go	/^func (n *Node) IsZero() bool {$/;"	f	unknown:yaml.Node	typeref:typename:bool
IsZeroer	vendor/gopkg.in/yaml.v3/yaml.go	/^type IsZeroer interface {$/;"	i	package:yaml
J1	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	J1  int$/;"	m	struct:difflib.OpCode	typeref:typename:int
J2	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	J2  int$/;"	m	struct:difflib.OpCode	typeref:typename:int
JSONEq	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) JSONEq(expected string, actual string, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
JSONEq	vendor/github.com/stretchr/testify/assert/assertions.go	/^func JSONEq(t TestingT, expected string, actual string, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
JSONEqf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func JSONEqf(t TestingT, expected string, actual string, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
JSONEqf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) JSONEqf(expected string, actual string, msg string, args ...interface{}) bo/;"	f	unknown:assert.Assertions	typeref:typename:bool
Key	vendor/gopkg.in/yaml.v3/yaml.go	/^	Key       string$/;"	m	struct:yaml.fieldInfo	typeref:typename:string
Kind	vendor/gopkg.in/yaml.v3/yaml.go	/^	Kind  Kind$/;"	m	struct:yaml.Node	typeref:typename:Kind
Kind	vendor/gopkg.in/yaml.v3/yaml.go	/^type Kind uint32$/;"	t	package:yaml
KnownFields	vendor/gopkg.in/yaml.v3/yaml.go	/^func (dec *Decoder) KnownFields(enable bool) {$/;"	f	unknown:yaml.Decoder
Len	vendor/github.com/davecgh/go-spew/spew/common.go	/^func (s *valuesSorter) Len() int {$/;"	f	unknown:spew.valuesSorter	typeref:typename:int
Len	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Len(object interface{}, length int, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Len	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Len(t TestingT, object interface{}, length int, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Len	vendor/gopkg.in/yaml.v3/sorter.go	/^func (l keyList) Len() int      { return len(l) }$/;"	f	unknown:yaml.keyList	typeref:typename:int
Lenf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Lenf(t TestingT, object interface{}, length int, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Lenf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Lenf(object interface{}, length int, msg string, args ...interface{}) bool /;"	f	unknown:assert.Assertions	typeref:typename:bool
Less	vendor/github.com/davecgh/go-spew/spew/common.go	/^func (s *valuesSorter) Less(i, j int) bool {$/;"	f	unknown:spew.valuesSorter	typeref:typename:bool
Less	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^func Less(t TestingT, e1 interface{}, e2 interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Less	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Less(e1 interface{}, e2 interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Less	vendor/gopkg.in/yaml.v3/sorter.go	/^func (l keyList) Less(i, j int) bool {$/;"	f	unknown:yaml.keyList	typeref:typename:bool
LessOrEqual	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^func LessOrEqual(t TestingT, e1 interface{}, e2 interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
LessOrEqual	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) LessOrEqual(e1 interface{}, e2 interface{}, msgAndArgs ...interface{}) bool/;"	f	unknown:assert.Assertions	typeref:typename:bool
LessOrEqualf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func LessOrEqualf(t TestingT, e1 interface{}, e2 interface{}, msg string, args ...interface{}) b/;"	f	package:assert	typeref:typename:bool
LessOrEqualf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) LessOrEqualf(e1 interface{}, e2 interface{}, msg string, args ...interface{/;"	f	unknown:assert.Assertions	typeref:typename:bool
Lessf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Lessf(t TestingT, e1 interface{}, e2 interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Lessf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Lessf(e1 interface{}, e2 interface{}, msg string, args ...interface{}) bool/;"	f	unknown:assert.Assertions	typeref:typename:bool
License	vendor/gopkg.in/yaml.v3/README.md	/^License$/;"	s
Line	vendor/gopkg.in/yaml.v3/yaml.go	/^	Line   int$/;"	m	struct:yaml.Node	typeref:typename:int
LineComment	vendor/gopkg.in/yaml.v3/yaml.go	/^	LineComment string$/;"	m	struct:yaml.Node	typeref:typename:string
LiteralStyle	vendor/gopkg.in/yaml.v3/yaml.go	/^	LiteralStyle$/;"	c	package:yaml
LongTag	vendor/gopkg.in/yaml.v3/yaml.go	/^func (n *Node) LongTag() string {$/;"	f	unknown:yaml.Node	typeref:typename:string
MappingNode	vendor/gopkg.in/yaml.v3/yaml.go	/^	MappingNode$/;"	c	package:yaml
Marshal	converter.go	/^func Marshal(in map[string]interface{}) ([]byte, error) {$/;"	f	package:strval	typeref:typename:([]byte, error)
Marshal	vendor/gopkg.in/yaml.v3/yaml.go	/^func Marshal(in interface{}) (out []byte, err error) {$/;"	f	package:yaml	typeref:typename:(out []byte, err error)
Marshaler	vendor/gopkg.in/yaml.v3/yaml.go	/^type Marshaler interface {$/;"	i	package:yaml
Match	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^type Match struct {$/;"	s	package:difflib
MaxDepth	vendor/github.com/davecgh/go-spew/spew/config.go	/^	MaxDepth int$/;"	m	struct:spew.ConfigState	typeref:typename:int
Negative	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^func Negative(t TestingT, e interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Negative	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Negative(e interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Negativef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Negativef(t TestingT, e interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Negativef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Negativef(e interface{}, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Never	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Never(condition func() bool, waitFor time.Duration, tick time.Duration, msg/;"	f	unknown:assert.Assertions	typeref:typename:bool
Never	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Never(t TestingT, condition func() bool, waitFor time.Duration, tick time.Duration, msgAndA/;"	f	package:assert	typeref:typename:bool
Neverf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Neverf(t TestingT, condition func() bool, waitFor time.Duration, tick time.Duration, msg st/;"	f	package:assert	typeref:typename:bool
Neverf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Neverf(condition func() bool, waitFor time.Duration, tick time.Duration, ms/;"	f	unknown:assert.Assertions	typeref:typename:bool
New	vendor/github.com/stretchr/testify/assert/forward_assertions.go	/^func New(t TestingT) *Assertions {$/;"	f	package:assert	typeref:typename:*Assertions
NewDecoder	vendor/gopkg.in/yaml.v3/yaml.go	/^func NewDecoder(r io.Reader) *Decoder {$/;"	f	package:yaml	typeref:typename:*Decoder
NewDefaultConfig	vendor/github.com/davecgh/go-spew/spew/config.go	/^func NewDefaultConfig() *ConfigState {$/;"	f	package:spew	typeref:typename:*ConfigState
NewEncoder	vendor/gopkg.in/yaml.v3/yaml.go	/^func NewEncoder(w io.Writer) *Encoder {$/;"	f	package:yaml	typeref:typename:*Encoder
NewFormatter	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) NewFormatter(v interface{}) fmt.Formatter {$/;"	f	unknown:spew.ConfigState	typeref:typename:fmt.Formatter
NewFormatter	vendor/github.com/davecgh/go-spew/spew/format.go	/^func NewFormatter(v interface{}) fmt.Formatter {$/;"	f	package:spew	typeref:typename:fmt.Formatter
NewMatcher	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func NewMatcher(a, b []string) *SequenceMatcher {$/;"	f	package:difflib	typeref:typename:*SequenceMatcher
NewMatcherWithJunk	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func NewMatcherWithJunk(a, b []string, autoJunk bool,$/;"	f	package:difflib	typeref:typename:*SequenceMatcher
Nil	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Nil(object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Nil	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Nil(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Nilf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Nilf(t TestingT, object interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Nilf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Nilf(object interface{}, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NoDirExists	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NoDirExists(path string, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NoDirExists	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NoDirExists(t TestingT, path string, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NoDirExistsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NoDirExistsf(t TestingT, path string, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NoDirExistsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NoDirExistsf(path string, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NoError	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NoError(err error, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NoError	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NoError(t TestingT, err error, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NoErrorf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NoErrorf(t TestingT, err error, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NoErrorf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NoErrorf(err error, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NoFileExists	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NoFileExists(path string, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NoFileExists	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NoFileExists(t TestingT, path string, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NoFileExistsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NoFileExistsf(t TestingT, path string, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NoFileExistsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NoFileExistsf(path string, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Node	vendor/gopkg.in/yaml.v3/yaml.go	/^type Node struct {$/;"	s	package:yaml
NotContains	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotContains(s interface{}, contains interface{}, msgAndArgs ...interface{})/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotContains	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotContains(t TestingT, s, contains interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotContainsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotContainsf(t TestingT, s interface{}, contains interface{}, msg string, args ...interface/;"	f	package:assert	typeref:typename:bool
NotContainsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotContainsf(s interface{}, contains interface{}, msg string, args ...inter/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotEmpty	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotEmpty(object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotEmpty	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotEmpty(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotEmptyf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotEmptyf(t TestingT, object interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotEmptyf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotEmptyf(object interface{}, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotEqual	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotEqual(expected interface{}, actual interface{}, msgAndArgs ...interface{/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotEqual	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotEqual(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotEqualValues	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotEqualValues(expected interface{}, actual interface{}, msgAndArgs ...inte/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotEqualValues	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotEqualValues(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotEqualValuesf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotEqualValuesf(t TestingT, expected interface{}, actual interface{}, msg string, args ...i/;"	f	package:assert	typeref:typename:bool
NotEqualValuesf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotEqualValuesf(expected interface{}, actual interface{}, msg string, args /;"	f	unknown:assert.Assertions	typeref:typename:bool
NotEqualf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotEqualf(t TestingT, expected interface{}, actual interface{}, msg string, args ...interfa/;"	f	package:assert	typeref:typename:bool
NotEqualf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotEqualf(expected interface{}, actual interface{}, msg string, args ...int/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotErrorIs	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotErrorIs(err error, target error, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotErrorIs	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotErrorIs(t TestingT, err, target error, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotErrorIsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotErrorIsf(t TestingT, err error, target error, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotErrorIsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotErrorIsf(err error, target error, msg string, args ...interface{}) bool /;"	f	unknown:assert.Assertions	typeref:typename:bool
NotNil	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotNil(object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotNil	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotNil(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotNilf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotNilf(t TestingT, object interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotNilf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotNilf(object interface{}, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotPanics	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotPanics(f PanicTestFunc, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotPanics	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotPanics(t TestingT, f PanicTestFunc, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotPanicsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotPanicsf(t TestingT, f PanicTestFunc, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotPanicsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotPanicsf(f PanicTestFunc, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotRegexp	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotRegexp(rx interface{}, str interface{}, msgAndArgs ...interface{}) bool /;"	f	unknown:assert.Assertions	typeref:typename:bool
NotRegexp	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotRegexp(t TestingT, rx interface{}, str interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotRegexpf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotRegexpf(t TestingT, rx interface{}, str interface{}, msg string, args ...interface{}) bo/;"	f	package:assert	typeref:typename:bool
NotRegexpf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotRegexpf(rx interface{}, str interface{}, msg string, args ...interface{}/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotSame	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotSame(expected interface{}, actual interface{}, msgAndArgs ...interface{}/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotSame	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotSame(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotSamef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotSamef(t TestingT, expected interface{}, actual interface{}, msg string, args ...interfac/;"	f	package:assert	typeref:typename:bool
NotSamef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotSamef(expected interface{}, actual interface{}, msg string, args ...inte/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotSubset	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotSubset(list interface{}, subset interface{}, msgAndArgs ...interface{}) /;"	f	unknown:assert.Assertions	typeref:typename:bool
NotSubset	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotSubset(t TestingT, list, subset interface{}, msgAndArgs ...interface{}) (ok bool) {$/;"	f	package:assert	typeref:typename:(ok bool)
NotSubsetf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotSubsetf(t TestingT, list interface{}, subset interface{}, msg string, args ...interface{/;"	f	package:assert	typeref:typename:bool
NotSubsetf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotSubsetf(list interface{}, subset interface{}, msg string, args ...interf/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotZero	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotZero(i interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
NotZero	vendor/github.com/stretchr/testify/assert/assertions.go	/^func NotZero(t TestingT, i interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotZerof	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func NotZerof(t TestingT, i interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
NotZerof	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) NotZerof(i interface{}, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Num	vendor/gopkg.in/yaml.v3/yaml.go	/^	Num       int$/;"	m	struct:yaml.fieldInfo	typeref:typename:int
ObjectsAreEqual	vendor/github.com/stretchr/testify/assert/assertions.go	/^func ObjectsAreEqual(expected, actual interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
ObjectsAreEqualValues	vendor/github.com/stretchr/testify/assert/assertions.go	/^func ObjectsAreEqualValues(expected, actual interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
OmitEmpty	vendor/gopkg.in/yaml.v3/yaml.go	/^	OmitEmpty bool$/;"	m	struct:yaml.fieldInfo	typeref:typename:bool
OpCode	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^type OpCode struct {$/;"	s	package:difflib
PanicTestFunc	vendor/github.com/stretchr/testify/assert/assertions.go	/^type PanicTestFunc func()$/;"	t	package:assert
Panics	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Panics(f PanicTestFunc, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Panics	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Panics(t TestingT, f PanicTestFunc, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
PanicsWithError	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) PanicsWithError(errString string, f PanicTestFunc, msgAndArgs ...interface{/;"	f	unknown:assert.Assertions	typeref:typename:bool
PanicsWithError	vendor/github.com/stretchr/testify/assert/assertions.go	/^func PanicsWithError(t TestingT, errString string, f PanicTestFunc, msgAndArgs ...interface{}) b/;"	f	package:assert	typeref:typename:bool
PanicsWithErrorf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func PanicsWithErrorf(t TestingT, errString string, f PanicTestFunc, msg string, args ...interfa/;"	f	package:assert	typeref:typename:bool
PanicsWithErrorf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) PanicsWithErrorf(errString string, f PanicTestFunc, msg string, args ...int/;"	f	unknown:assert.Assertions	typeref:typename:bool
PanicsWithValue	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) PanicsWithValue(expected interface{}, f PanicTestFunc, msgAndArgs ...interf/;"	f	unknown:assert.Assertions	typeref:typename:bool
PanicsWithValue	vendor/github.com/stretchr/testify/assert/assertions.go	/^func PanicsWithValue(t TestingT, expected interface{}, f PanicTestFunc, msgAndArgs ...interface{/;"	f	package:assert	typeref:typename:bool
PanicsWithValuef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func PanicsWithValuef(t TestingT, expected interface{}, f PanicTestFunc, msg string, args ...int/;"	f	package:assert	typeref:typename:bool
PanicsWithValuef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) PanicsWithValuef(expected interface{}, f PanicTestFunc, msg string, args ../;"	f	unknown:assert.Assertions	typeref:typename:bool
Panicsf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Panicsf(t TestingT, f PanicTestFunc, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Panicsf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Panicsf(f PanicTestFunc, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Positive	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^func Positive(t TestingT, e interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Positive	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Positive(e interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Positivef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Positivef(t TestingT, e interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Positivef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Positivef(e interface{}, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Print	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Print(a ...interface{}) (n int, err error) {$/;"	f	unknown:spew.ConfigState	typeref:typename:(n int, err error)
Print	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func Print(a ...interface{}) (n int, err error) {$/;"	f	package:spew	typeref:typename:(n int, err error)
Printf	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Printf(format string, a ...interface{}) (n int, err error) {$/;"	f	unknown:spew.ConfigState	typeref:typename:(n int, err error)
Printf	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func Printf(format string, a ...interface{}) (n int, err error) {$/;"	f	package:spew	typeref:typename:(n int, err error)
Println	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Println(a ...interface{}) (n int, err error) {$/;"	f	unknown:spew.ConfigState	typeref:typename:(n int, err error)
Println	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func Println(a ...interface{}) (n int, err error) {$/;"	f	package:spew	typeref:typename:(n int, err error)
QuickRatio	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) QuickRatio() float64 {$/;"	f	unknown:difflib.SequenceMatcher	typeref:typename:float64
Ratio	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) Ratio() float64 {$/;"	f	unknown:difflib.SequenceMatcher	typeref:typename:float64
RealQuickRatio	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) RealQuickRatio() float64 {$/;"	f	unknown:difflib.SequenceMatcher	typeref:typename:float64
Regexp	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Regexp(rx interface{}, str interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Regexp	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Regexp(t TestingT, rx interface{}, str interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Regexpf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Regexpf(t TestingT, rx interface{}, str interface{}, msg string, args ...interface{}) bool /;"	f	package:assert	typeref:typename:bool
Regexpf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Regexpf(rx interface{}, str interface{}, msg string, args ...interface{}) b/;"	f	unknown:assert.Assertions	typeref:typename:bool
Same	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Same(expected interface{}, actual interface{}, msgAndArgs ...interface{}) b/;"	f	unknown:assert.Assertions	typeref:typename:bool
Same	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Same(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Samef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Samef(t TestingT, expected interface{}, actual interface{}, msg string, args ...interface{}/;"	f	package:assert	typeref:typename:bool
Samef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Samef(expected interface{}, actual interface{}, msg string, args ...interfa/;"	f	unknown:assert.Assertions	typeref:typename:bool
ScalarNode	vendor/gopkg.in/yaml.v3/yaml.go	/^	ScalarNode$/;"	c	package:yaml
Sdump	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Sdump(a ...interface{}) string {$/;"	f	unknown:spew.ConfigState	typeref:typename:string
Sdump	vendor/github.com/davecgh/go-spew/spew/dump.go	/^func Sdump(a ...interface{}) string {$/;"	f	package:spew	typeref:typename:string
SequenceMatcher	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^type SequenceMatcher struct {$/;"	s	package:difflib
SequenceNode	vendor/gopkg.in/yaml.v3/yaml.go	/^	SequenceNode$/;"	c	package:yaml
SetIndent	vendor/gopkg.in/yaml.v3/yaml.go	/^func (e *Encoder) SetIndent(spaces int) {$/;"	f	unknown:yaml.Encoder
SetSeq1	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) SetSeq1(a []string) {$/;"	f	unknown:difflib.SequenceMatcher
SetSeq2	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) SetSeq2(b []string) {$/;"	f	unknown:difflib.SequenceMatcher
SetSeqs	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) SetSeqs(a, b []string) {$/;"	f	unknown:difflib.SequenceMatcher
SetString	vendor/gopkg.in/yaml.v3/yaml.go	/^func (n *Node) SetString(s string) {$/;"	f	unknown:yaml.Node
ShortTag	vendor/gopkg.in/yaml.v3/yaml.go	/^func (n *Node) ShortTag() string {$/;"	f	unknown:yaml.Node	typeref:typename:string
SingleQuotedStyle	vendor/gopkg.in/yaml.v3/yaml.go	/^	SingleQuotedStyle$/;"	c	package:yaml
Size	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	Size int$/;"	m	struct:difflib.Match	typeref:typename:int
SortKeys	vendor/github.com/davecgh/go-spew/spew/config.go	/^	SortKeys bool$/;"	m	struct:spew.ConfigState	typeref:typename:bool
SpewKeys	vendor/github.com/davecgh/go-spew/spew/config.go	/^	SpewKeys bool$/;"	m	struct:spew.ConfigState	typeref:typename:bool
SplitLines	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func SplitLines(s string) []string {$/;"	f	package:difflib	typeref:typename:[]string
Sprint	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Sprint(a ...interface{}) string {$/;"	f	unknown:spew.ConfigState	typeref:typename:string
Sprint	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func Sprint(a ...interface{}) string {$/;"	f	package:spew	typeref:typename:string
Sprintf	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Sprintf(format string, a ...interface{}) string {$/;"	f	unknown:spew.ConfigState	typeref:typename:string
Sprintf	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func Sprintf(format string, a ...interface{}) string {$/;"	f	package:spew	typeref:typename:string
Sprintln	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) Sprintln(a ...interface{}) string {$/;"	f	unknown:spew.ConfigState	typeref:typename:string
Sprintln	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func Sprintln(a ...interface{}) string {$/;"	f	package:spew	typeref:typename:string
String	vendor/gopkg.in/yaml.v3/yamlh.go	/^func (e yaml_event_type_t) String() string {$/;"	f	unknown:yaml.yaml_event_type_t	typeref:typename:string
String	vendor/gopkg.in/yaml.v3/yamlh.go	/^func (ps yaml_parser_state_t) String() string {$/;"	f	unknown:yaml.yaml_parser_state_t	typeref:typename:string
String	vendor/gopkg.in/yaml.v3/yamlh.go	/^func (tt yaml_token_type_t) String() string {$/;"	f	unknown:yaml.yaml_token_type_t	typeref:typename:string
Style	vendor/gopkg.in/yaml.v3/yaml.go	/^	Style Style$/;"	m	struct:yaml.Node	typeref:typename:Style
Style	vendor/gopkg.in/yaml.v3/yaml.go	/^type Style uint32$/;"	t	package:yaml
Subset	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Subset(list interface{}, subset interface{}, msgAndArgs ...interface{}) boo/;"	f	unknown:assert.Assertions	typeref:typename:bool
Subset	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Subset(t TestingT, list, subset interface{}, msgAndArgs ...interface{}) (ok bool) {$/;"	f	package:assert	typeref:typename:(ok bool)
Subsetf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Subsetf(t TestingT, list interface{}, subset interface{}, msg string, args ...interface{}) /;"	f	package:assert	typeref:typename:bool
Subsetf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Subsetf(list interface{}, subset interface{}, msg string, args ...interface/;"	f	unknown:assert.Assertions	typeref:typename:bool
Swap	vendor/github.com/davecgh/go-spew/spew/common.go	/^func (s *valuesSorter) Swap(i, j int) {$/;"	f	unknown:spew.valuesSorter
Swap	vendor/gopkg.in/yaml.v3/sorter.go	/^func (l keyList) Swap(i, j int) { l[i], l[j] = l[j], l[i] }$/;"	f	unknown:yaml.keyList
Tag	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	Tag byte$/;"	m	struct:difflib.OpCode	typeref:typename:byte
Tag	vendor/gopkg.in/yaml.v3/yaml.go	/^	Tag string$/;"	m	struct:yaml.Node	typeref:typename:string
TaggedStyle	vendor/gopkg.in/yaml.v3/yaml.go	/^	TaggedStyle Style = 1 << iota$/;"	c	package:yaml
TestMarshal	converter_test.go	/^func TestMarshal(t *testing.T) {$/;"	f	package:strval_test
TestingT	vendor/github.com/stretchr/testify/assert/assertions.go	/^type TestingT interface {$/;"	i	package:assert
ToDate	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	ToDate   string   \/\/ Second file time$/;"	m	struct:difflib.UnifiedDiff	typeref:typename:string
ToFile	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	ToFile   string   \/\/ Second file name$/;"	m	struct:difflib.UnifiedDiff	typeref:typename:string
True	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) True(value bool, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
True	vendor/github.com/stretchr/testify/assert/assertions.go	/^func True(t TestingT, value bool, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Truef	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Truef(t TestingT, value bool, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Truef	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Truef(value bool, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
TypeError	vendor/gopkg.in/yaml.v3/yaml.go	/^type TypeError struct {$/;"	s	package:yaml
UnifiedDiff	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^type UnifiedDiff struct {$/;"	s	package:difflib
Unmarshal	vendor/gopkg.in/yaml.v3/yaml.go	/^func Unmarshal(in []byte, out interface{}) (err error) {$/;"	f	package:yaml	typeref:typename:(err error)
Unmarshaler	vendor/gopkg.in/yaml.v3/yaml.go	/^type Unmarshaler interface {$/;"	i	package:yaml
UnsafeDisabled	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^	UnsafeDisabled = false$/;"	c	package:spew
UnsafeDisabled	vendor/github.com/davecgh/go-spew/spew/bypasssafe.go	/^	UnsafeDisabled = true$/;"	c	package:spew
Value	vendor/gopkg.in/yaml.v3/yaml.go	/^	Value string$/;"	m	struct:yaml.Node	typeref:typename:string
ValueAssertionFunc	vendor/github.com/stretchr/testify/assert/assertions.go	/^type ValueAssertionFunc func(TestingT, interface{}, ...interface{}) bool$/;"	t	package:assert
WithinDuration	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) WithinDuration(expected time.Time, actual time.Time, delta time.Duration, m/;"	f	unknown:assert.Assertions	typeref:typename:bool
WithinDuration	vendor/github.com/stretchr/testify/assert/assertions.go	/^func WithinDuration(t TestingT, expected, actual time.Time, delta time.Duration, msgAndArgs ...i/;"	f	package:assert	typeref:typename:bool
WithinDurationf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func WithinDurationf(t TestingT, expected time.Time, actual time.Time, delta time.Duration, msg /;"	f	package:assert	typeref:typename:bool
WithinDurationf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) WithinDurationf(expected time.Time, actual time.Time, delta time.Duration, /;"	f	unknown:assert.Assertions	typeref:typename:bool
WriteContextDiff	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func WriteContextDiff(writer io.Writer, diff ContextDiff) error {$/;"	f	package:difflib	typeref:typename:error
WriteUnifiedDiff	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func WriteUnifiedDiff(writer io.Writer, diff UnifiedDiff) error {$/;"	f	package:difflib	typeref:typename:error
YAML support for the Go language	vendor/gopkg.in/yaml.v3/README.md	/^# YAML support for the Go language$/;"	c
YAMLEq	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) YAMLEq(expected string, actual string, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
YAMLEq	vendor/github.com/stretchr/testify/assert/assertions.go	/^func YAMLEq(t TestingT, expected string, actual string, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
YAMLEqf	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func YAMLEqf(t TestingT, expected string, actual string, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
YAMLEqf	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) YAMLEqf(expected string, actual string, msg string, args ...interface{}) bo/;"	f	unknown:assert.Assertions	typeref:typename:bool
Zero	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Zero(i interface{}, msgAndArgs ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
Zero	vendor/github.com/stretchr/testify/assert/assertions.go	/^func Zero(t TestingT, i interface{}, msgAndArgs ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Zerof	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^func Zerof(t TestingT, i interface{}, msg string, args ...interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
Zerof	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^func (a *Assertions) Zerof(i interface{}, msg string, args ...interface{}) bool {$/;"	f	unknown:assert.Assertions	typeref:typename:bool
_assert	converter_test.go	/^	_assert "github.com\/stretchr\/testify\/assert"$/;"	P	package:github.com/stretchr/testify/assert
a	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	a              []string$/;"	m	struct:difflib.SequenceMatcher	typeref:typename:[]string
alias	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) alias(n *Node, out reflect.Value) (good bool) {$/;"	f	unknown:yaml.decoder	typeref:typename:(good bool)
alias	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) alias() *Node {$/;"	f	unknown:yaml.parser	typeref:typename:*Node
aliasCount	vendor/gopkg.in/yaml.v3/decode.go	/^	aliasCount  int$/;"	m	struct:yaml.decoder	typeref:typename:int
aliasDepth	vendor/gopkg.in/yaml.v3/decode.go	/^	aliasDepth  int$/;"	m	struct:yaml.decoder	typeref:typename:int
alias_ratio_range	vendor/gopkg.in/yaml.v3/decode.go	/^	alias_ratio_range = float64(alias_ratio_range_high - alias_ratio_range_low)$/;"	c	package:yaml
alias_ratio_range_high	vendor/gopkg.in/yaml.v3/decode.go	/^	alias_ratio_range_high = 4000000$/;"	c	package:yaml
alias_ratio_range_low	vendor/gopkg.in/yaml.v3/decode.go	/^	alias_ratio_range_low = 400000$/;"	c	package:yaml
aliases	vendor/gopkg.in/yaml.v3/decode.go	/^	aliases map[*Node]bool$/;"	m	struct:yaml.decoder	typeref:typename:map[*Node]bool
aliases	vendor/gopkg.in/yaml.v3/yamlh.go	/^	aliases []yaml_alias_data_t \/\/ The alias data.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]yaml_alias_data_t
allowedAliasRatio	vendor/gopkg.in/yaml.v3/decode.go	/^func allowedAliasRatio(decodeCount int) float64 {$/;"	f	package:yaml	typeref:typename:float64
allowedTimestampFormats	vendor/gopkg.in/yaml.v3/resolve.go	/^var allowedTimestampFormats = []string{$/;"	v	package:yaml
anchor	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) anchor(n *Node, anchor []byte) {$/;"	f	unknown:yaml.parser
anchor	vendor/gopkg.in/yaml.v3/yamlh.go	/^	anchor []byte      \/\/ The anchor.$/;"	m	struct:yaml.yaml_alias_data_t	typeref:typename:[]byte
anchor	vendor/gopkg.in/yaml.v3/yamlh.go	/^	anchor []byte$/;"	m	struct:yaml.yaml_event_t	typeref:typename:[]byte
anchor_data	vendor/gopkg.in/yaml.v3/yamlh.go	/^	anchor_data struct {$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:struct { anchor []byte ; alias bool ; }
anchors	vendor/gopkg.in/yaml.v3/decode.go	/^	anchors  map[string]*Node$/;"	m	struct:yaml.parser	typeref:typename:map[string]*Node
anchors	vendor/gopkg.in/yaml.v3/yamlh.go	/^	anchors *struct {$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:*struct { references int ; anchor int ; serialized bool ; }
as_digit	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func as_digit(b []byte, i int) int {$/;"	f	package:yaml	typeref:typename:int
as_hex	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func as_hex(b []byte, i int) int {$/;"	f	package:yaml	typeref:typename:int
assert	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^package assert$/;"	p
assert	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^package assert$/;"	p
assert	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^package assert$/;"	p
assert	vendor/github.com/stretchr/testify/assert/assertion_order.go	/^package assert$/;"	p
assert	vendor/github.com/stretchr/testify/assert/assertions.go	/^package assert$/;"	p
assert	vendor/github.com/stretchr/testify/assert/doc.go	/^package assert$/;"	p
assert	vendor/github.com/stretchr/testify/assert/errors.go	/^package assert$/;"	p
assert	vendor/github.com/stretchr/testify/assert/forward_assertions.go	/^package assert$/;"	p
assert	vendor/github.com/stretchr/testify/assert/http_assertions.go	/^package assert$/;"	p
asteriskBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	asteriskBytes         = []byte("*")$/;"	v	package:spew
autoJunk	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	autoJunk       bool$/;"	m	struct:difflib.SequenceMatcher	typeref:typename:bool
b	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	b              []string$/;"	m	struct:difflib.SequenceMatcher	typeref:typename:[]string
b2j	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	b2j            map[string][]int$/;"	m	struct:difflib.SequenceMatcher	typeref:typename:map[string][]int
bJunk	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	bJunk          map[string]struct{}$/;"	m	struct:difflib.SequenceMatcher	typeref:typename:map[string]struct{}
bPopular	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	bPopular       map[string]struct{}$/;"	m	struct:difflib.SequenceMatcher	typeref:typename:map[string]struct{}
base60float	vendor/gopkg.in/yaml.v3/encode.go	/^var base60float = regexp.MustCompile(`^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+(?:\\.[0-9_]*)?$`)$/;"	v	package:yaml
best_indent	vendor/gopkg.in/yaml.v3/yamlh.go	/^	best_indent int          \/\/ The number of indentation spaces.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
best_width	vendor/gopkg.in/yaml.v3/yamlh.go	/^	best_width  int          \/\/ The preferred width of the output lines.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
binaryTag	vendor/gopkg.in/yaml.v3/resolve.go	/^	binaryTag    = "!!binary"$/;"	c	package:yaml
bom_UTF16BE	vendor/gopkg.in/yaml.v3/readerc.go	/^	bom_UTF16BE = "\\xfe\\xff"$/;"	c	package:yaml
bom_UTF16LE	vendor/gopkg.in/yaml.v3/readerc.go	/^	bom_UTF16LE = "\\xff\\xfe"$/;"	c	package:yaml
bom_UTF8	vendor/gopkg.in/yaml.v3/readerc.go	/^	bom_UTF8    = "\\xef\\xbb\\xbf"$/;"	c	package:yaml
boolTag	vendor/gopkg.in/yaml.v3/resolve.go	/^	boolTag      = "!!bool"$/;"	c	package:yaml
boolv	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) boolv(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
buffer	vendor/gopkg.in/yaml.v3/yamlh.go	/^	buffer     []byte \/\/ The working buffer.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]byte
buffer	vendor/gopkg.in/yaml.v3/yamlh.go	/^	buffer     []byte \/\/ The working buffer.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]byte
buffer_pos	vendor/gopkg.in/yaml.v3/yamlh.go	/^	buffer_pos int    \/\/ The current position of the buffer.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
buffer_pos	vendor/gopkg.in/yaml.v3/yamlh.go	/^	buffer_pos int    \/\/ The current position of the buffer.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
buildDefaultFormat	vendor/github.com/davecgh/go-spew/spew/format.go	/^func (f *formatState) buildDefaultFormat() (format string) {$/;"	f	unknown:spew.formatState	typeref:typename:(format string)
buildErrorChainString	vendor/github.com/stretchr/testify/assert/assertions.go	/^func buildErrorChainString(err error) string {$/;"	f	package:assert	typeref:typename:string
cCharRE	vendor/github.com/davecgh/go-spew/spew/dump.go	/^	cCharRE = regexp.MustCompile("^.*\\\\._Ctype_char$")$/;"	v	package:spew
cUint8tCharRE	vendor/github.com/davecgh/go-spew/spew/dump.go	/^	cUint8tCharRE = regexp.MustCompile("^.*\\\\._Ctype_uint8_t$")$/;"	v	package:spew
cUnsignedCharRE	vendor/github.com/davecgh/go-spew/spew/dump.go	/^	cUnsignedCharRE = regexp.MustCompile("^.*\\\\._Ctype_unsignedchar$")$/;"	v	package:spew
cache	vendor/gopkg.in/yaml.v3/scannerc.go	/^func cache(parser *yaml_parser_t, length int) bool {$/;"	f	package:yaml	typeref:typename:bool
calcRelativeError	vendor/github.com/stretchr/testify/assert/assertions.go	/^func calcRelativeError(expected, actual interface{}) (float64, error) {$/;"	f	package:assert	typeref:typename:(float64, error)
calculateRatio	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func calculateRatio(matches, length int) float64 {$/;"	f	package:difflib	typeref:typename:float64
callObsoleteUnmarshaler	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) callObsoleteUnmarshaler(n *Node, u obsoleteUnmarshaler) (good bool) {$/;"	f	unknown:yaml.decoder	typeref:typename:(good bool)
callUnmarshaler	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) callUnmarshaler(n *Node, u Unmarshaler) (good bool) {$/;"	f	unknown:yaml.decoder	typeref:typename:(good bool)
canSortSimply	vendor/github.com/davecgh/go-spew/spew/common.go	/^func canSortSimply(kind reflect.Kind) bool {$/;"	f	package:spew	typeref:typename:bool
canonical	vendor/gopkg.in/yaml.v3/yamlh.go	/^	canonical   bool         \/\/ If the output is in the canonical style?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
capEqualsBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	capEqualsBytes        = []byte("cap=")$/;"	v	package:spew
catchPanic	vendor/github.com/davecgh/go-spew/spew/common.go	/^func catchPanic(w io.Writer, v reflect.Value) {$/;"	f	package:spew
chainB	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) chainB() {$/;"	f	unknown:difflib.SequenceMatcher
circularBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	circularBytes         = []byte("<already shown>")$/;"	v	package:spew
circularShortBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	circularShortBytes    = []byte("<shown>")$/;"	v	package:spew
closeAngleBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	closeAngleBytes       = []byte(">")$/;"	v	package:spew
closeBraceBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	closeBraceBytes       = []byte("}")$/;"	v	package:spew
closeBracketBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	closeBracketBytes     = []byte("]")$/;"	v	package:spew
closeMapBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	closeMapBytes         = []byte("]")$/;"	v	package:spew
closeParenBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	closeParenBytes       = []byte(")")$/;"	v	package:spew
closed	vendor/gopkg.in/yaml.v3/yamlh.go	/^	closed bool \/\/ If the stream was already closed?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
colonBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	colonBytes            = []byte(":")$/;"	v	package:spew
colonSpaceBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	colonSpaceBytes       = []byte(": ")$/;"	v	package:spew
column	vendor/gopkg.in/yaml.v3/yamlh.go	/^	column     int  \/\/ The current column.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
column	vendor/gopkg.in/yaml.v3/yamlh.go	/^	column int \/\/ The position column.$/;"	m	struct:yaml.yaml_mark_t	typeref:typename:int
commaNewlineBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	commaNewlineBytes     = []byte(",\\n")$/;"	v	package:spew
comments	vendor/gopkg.in/yaml.v3/yamlh.go	/^	comments      []yaml_comment_t \/\/ The folded comments for all parsed tokens$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]yaml_comment_t
comments_head	vendor/gopkg.in/yaml.v3/yamlh.go	/^	comments_head int$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
compare	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^func compare(obj1, obj2 interface{}, kind reflect.Kind) (CompareType, bool) {$/;"	f	package:assert	typeref:typename:(CompareType, bool)
compareEqual	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	compareEqual$/;"	c	package:assert
compareGreater	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	compareGreater$/;"	c	package:assert
compareLess	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	compareLess CompareType = iota - 1$/;"	c	package:assert
compareTwoValues	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^func compareTwoValues(t TestingT, e1 interface{}, e2 interface{}, allowedComparesResults []Compa/;"	f	package:assert	typeref:typename:bool
constructOrigFormat	vendor/github.com/davecgh/go-spew/spew/format.go	/^func (f *formatState) constructOrigFormat(verb rune) (format string) {$/;"	f	unknown:spew.formatState	typeref:typename:(format string)
containsKind	vendor/github.com/stretchr/testify/assert/assertions.go	/^func containsKind(kinds []reflect.Kind, kind reflect.Kind) bool {$/;"	f	package:assert	typeref:typename:bool
containsValue	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^func containsValue(values []CompareType, value CompareType) bool {$/;"	f	package:assert	typeref:typename:bool
content	vendor/github.com/stretchr/testify/assert/assertions.go	/^	content string$/;"	m	struct:assert.labeledContent	typeref:typename:string
context	vendor/gopkg.in/yaml.v3/yamlh.go	/^	context      string$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:string
context_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	context_mark yaml_mark_t$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:yaml_mark_t
convertArgs	vendor/github.com/davecgh/go-spew/spew/config.go	/^func (c *ConfigState) convertArgs(args []interface{}) (formatters []interface{}) {$/;"	f	unknown:spew.ConfigState	typeref:typename:(formatters []interface{})
convertArgs	vendor/github.com/davecgh/go-spew/spew/spew.go	/^func convertArgs(args []interface{}) (formatters []interface{}) {$/;"	f	package:spew	typeref:typename:(formatters []interface{})
cs	vendor/github.com/davecgh/go-spew/spew/common.go	/^	cs      *ConfigState$/;"	m	struct:spew.valuesSorter	typeref:typename:*ConfigState
cs	vendor/github.com/davecgh/go-spew/spew/dump.go	/^	cs               *ConfigState$/;"	m	struct:spew.dumpState	typeref:typename:*ConfigState
cs	vendor/github.com/davecgh/go-spew/spew/format.go	/^	cs             *ConfigState$/;"	m	struct:spew.formatState	typeref:typename:*ConfigState
decodeCount	vendor/gopkg.in/yaml.v3/decode.go	/^	decodeCount int$/;"	m	struct:yaml.decoder	typeref:typename:int
decoder	vendor/gopkg.in/yaml.v3/decode.go	/^type decoder struct {$/;"	s	package:yaml
default_tag_directives	vendor/gopkg.in/yaml.v3/parserc.go	/^var default_tag_directives = []yaml_tag_directive_t{$/;"	v	package:yaml
depth	vendor/github.com/davecgh/go-spew/spew/dump.go	/^	depth            int$/;"	m	struct:spew.dumpState	typeref:typename:int
depth	vendor/github.com/davecgh/go-spew/spew/format.go	/^	depth          int$/;"	m	struct:spew.formatState	typeref:typename:int
destroy	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) destroy() {$/;"	f	unknown:yaml.parser
destroy	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) destroy() {$/;"	f	unknown:yaml.encoder
didPanic	vendor/github.com/stretchr/testify/assert/assertions.go	/^func didPanic(f PanicTestFunc) (bool, interface{}, string) {$/;"	f	package:assert	typeref:typename:(bool, interface{}, string)
diff	vendor/github.com/stretchr/testify/assert/assertions.go	/^func diff(expected interface{}, actual interface{}) string {$/;"	f	package:assert	typeref:typename:string
diffLists	vendor/github.com/stretchr/testify/assert/assertions.go	/^func diffLists(listA, listB interface{}) (extraA, extraB []interface{}) {$/;"	f	package:assert	typeref:typename:(extraA, extraB []interface{})
difflib	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^package difflib$/;"	p
doc	vendor/gopkg.in/yaml.v3/decode.go	/^	doc      *Node$/;"	m	struct:yaml.parser	typeref:typename:*Node
doc	vendor/gopkg.in/yaml.v3/decode.go	/^	doc     *Node$/;"	m	struct:yaml.decoder	typeref:typename:*Node
document	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) document(n *Node, out reflect.Value) (good bool) {$/;"	f	unknown:yaml.decoder	typeref:typename:(good bool)
document	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) document() *Node {$/;"	f	unknown:yaml.parser	typeref:typename:*Node
document	vendor/gopkg.in/yaml.v3/yamlh.go	/^	document *yaml_document_t \/\/ The currently emitted document.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:*yaml_document_t
document	vendor/gopkg.in/yaml.v3/yamlh.go	/^	document *yaml_document_t \/\/ The currently parsed document.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:*yaml_document_t
doneInit	vendor/gopkg.in/yaml.v3/decode.go	/^	doneInit bool$/;"	m	struct:yaml.parser	typeref:typename:bool
doneInit	vendor/gopkg.in/yaml.v3/encode.go	/^	doneInit bool$/;"	m	struct:yaml.encoder	typeref:typename:bool
dump	vendor/github.com/davecgh/go-spew/spew/dump.go	/^func (d *dumpState) dump(v reflect.Value) {$/;"	f	unknown:spew.dumpState
dumpPtr	vendor/github.com/davecgh/go-spew/spew/dump.go	/^func (d *dumpState) dumpPtr(v reflect.Value) {$/;"	f	unknown:spew.dumpState
dumpSlice	vendor/github.com/davecgh/go-spew/spew/dump.go	/^func (d *dumpState) dumpSlice(v reflect.Value) {$/;"	f	unknown:spew.dumpState
dumpState	vendor/github.com/davecgh/go-spew/spew/dump.go	/^type dumpState struct {$/;"	s	package:spew
durationType	vendor/gopkg.in/yaml.v3/decode.go	/^	durationType   = reflect.TypeOf(time.Duration(0))$/;"	v	package:yaml
emit	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) emit() {$/;"	f	unknown:yaml.encoder
emitScalar	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) emitScalar(value, anchor, tag string, style yaml_scalar_style_t, head, line, f/;"	f	unknown:yaml.encoder
emitter	vendor/gopkg.in/yaml.v3/encode.go	/^	emitter  yaml_emitter_t$/;"	m	struct:yaml.encoder	typeref:typename:yaml_emitter_t
encodeBase64	vendor/gopkg.in/yaml.v3/resolve.go	/^func encodeBase64(s string) string {$/;"	f	package:yaml	typeref:typename:string
encoder	vendor/gopkg.in/yaml.v3/encode.go	/^type encoder struct {$/;"	s	package:yaml
encoder	vendor/gopkg.in/yaml.v3/yaml.go	/^	encoder *encoder$/;"	m	struct:yaml.Encoder	typeref:typename:*encoder
encoding	vendor/gopkg.in/yaml.v3/yamlh.go	/^	encoding yaml_encoding_t \/\/ The input encoding.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:yaml_encoding_t
encoding	vendor/gopkg.in/yaml.v3/yamlh.go	/^	encoding yaml_encoding_t \/\/ The stream encoding.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:yaml_encoding_t
encoding	vendor/gopkg.in/yaml.v3/yamlh.go	/^	encoding yaml_encoding_t$/;"	m	struct:yaml.yaml_event_t	typeref:typename:yaml_encoding_t
encoding	vendor/gopkg.in/yaml.v3/yamlh.go	/^	encoding yaml_encoding_t$/;"	m	struct:yaml.yaml_token_t	typeref:typename:yaml_encoding_t
end_implicit	vendor/gopkg.in/yaml.v3/yamlh.go	/^	end_implicit   int \/\/ Is the document end indicator implicit?$/;"	m	struct:yaml.yaml_document_t	typeref:typename:int
end_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	end_mark   yaml_mark_t \/\/ Position where comment terminated$/;"	m	struct:yaml.yaml_comment_t	typeref:typename:yaml_mark_t
end_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	end_mark   yaml_mark_t \/\/ The end of the node.$/;"	m	struct:yaml.yaml_node_t	typeref:typename:yaml_mark_t
end_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	start_mark, end_mark yaml_mark_t$/;"	m	struct:yaml.yaml_document_t	typeref:typename:yaml_mark_t
end_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	start_mark, end_mark yaml_mark_t$/;"	m	struct:yaml.yaml_event_t	typeref:typename:yaml_mark_t
end_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	start_mark, end_mark yaml_mark_t$/;"	m	struct:yaml.yaml_token_t	typeref:typename:yaml_mark_t
eof	vendor/gopkg.in/yaml.v3/yamlh.go	/^	eof bool \/\/ EOF flag$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:bool
err	vendor/gopkg.in/yaml.v3/yaml.go	/^	err error$/;"	m	struct:yaml.yamlError	typeref:typename:error
error	vendor/gopkg.in/yaml.v3/yamlh.go	/^	error   yaml_error_type_t \/\/ Error type.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:yaml_error_type_t
error	vendor/gopkg.in/yaml.v3/yamlh.go	/^	error yaml_error_type_t \/\/ Error type.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:yaml_error_type_t
event	vendor/gopkg.in/yaml.v3/decode.go	/^	event    yaml_event_t$/;"	m	struct:yaml.parser	typeref:typename:yaml_event_t
event	vendor/gopkg.in/yaml.v3/encode.go	/^	event    yaml_event_t$/;"	m	struct:yaml.encoder	typeref:typename:yaml_event_t
eventStrings	vendor/gopkg.in/yaml.v3/yamlh.go	/^var eventStrings = []string{$/;"	v	package:yaml
events	vendor/gopkg.in/yaml.v3/yamlh.go	/^	events      []yaml_event_t \/\/ The event queue.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]yaml_event_t
events_head	vendor/gopkg.in/yaml.v3/yamlh.go	/^	events_head int            \/\/ The head of the event queue.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
expect	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) expect(e yaml_event_type_t) {$/;"	f	unknown:yaml.parser
fail	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) fail() {$/;"	f	unknown:yaml.parser
fail	vendor/gopkg.in/yaml.v3/yaml.go	/^func fail(err error) {$/;"	f	package:yaml
failNower	vendor/github.com/stretchr/testify/assert/assertions.go	/^type failNower interface {$/;"	i	package:assert
failWantMap	vendor/gopkg.in/yaml.v3/decode.go	/^func failWantMap() {$/;"	f	package:yaml
failf	vendor/gopkg.in/yaml.v3/yaml.go	/^func failf(format string, args ...interface{}) {$/;"	f	package:yaml
falseBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	falseBytes            = []byte("false")$/;"	v	package:spew
fdump	vendor/github.com/davecgh/go-spew/spew/dump.go	/^func fdump(cs *ConfigState, w io.Writer, a ...interface{}) {$/;"	f	package:spew
fieldByIndex	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) fieldByIndex(n *Node, v reflect.Value, index []int) (field reflect.Value) {$/;"	f	unknown:yaml.decoder	typeref:typename:(field reflect.Value)
fieldByIndex	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) fieldByIndex(v reflect.Value, index []int) (field reflect.Value) {$/;"	f	unknown:yaml.encoder	typeref:typename:(field reflect.Value)
fieldInfo	vendor/gopkg.in/yaml.v3/yaml.go	/^type fieldInfo struct {$/;"	s	package:yaml
fieldMapMutex	vendor/gopkg.in/yaml.v3/yaml.go	/^var fieldMapMutex sync.RWMutex$/;"	v	package:yaml
findLongestMatch	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) findLongestMatch(alo, ahi, blo, bhi int) Match {$/;"	f	unknown:difflib.SequenceMatcher	typeref:typename:Match
finish	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) finish() {$/;"	f	unknown:yaml.encoder
flagIndir	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^	flagIndir     = uintptr(1 << 1)$/;"	v	package:spew
flagKindShift	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^	flagKindShift = uintptr(flagKindWidth - 1)$/;"	v	package:spew
flagKindWidth	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^	flagKindWidth = uintptr(5)$/;"	v	package:spew
flagRO	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^	flagRO        = uintptr(1 << 0)$/;"	v	package:spew
float32Type	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	float32Type = reflect.TypeOf(float32(1))$/;"	v	package:assert
float64Type	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	float64Type = reflect.TypeOf(float64(1))$/;"	v	package:assert
floatTag	vendor/gopkg.in/yaml.v3/resolve.go	/^	floatTag     = "!!float"$/;"	c	package:yaml
floatv	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) floatv(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
flow	vendor/gopkg.in/yaml.v3/encode.go	/^	flow     bool$/;"	m	struct:yaml.encoder	typeref:typename:bool
flow_level	vendor/gopkg.in/yaml.v3/yamlh.go	/^	flow_level int \/\/ The current flow level.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
flow_level	vendor/gopkg.in/yaml.v3/yamlh.go	/^	flow_level int \/\/ The number of unclosed '[' and '{' indicators.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
flush	vendor/gopkg.in/yaml.v3/emitterc.go	/^func flush(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
foot	vendor/gopkg.in/yaml.v3/yamlh.go	/^	foot []byte$/;"	m	struct:yaml.yaml_comment_t	typeref:typename:[]byte
foot_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	foot_comment []byte \/\/ The current foot comments$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]byte
foot_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	foot_comment []byte$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]byte
foot_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	foot_comment []byte$/;"	m	struct:yaml.yaml_event_t	typeref:typename:[]byte
foot_indent	vendor/gopkg.in/yaml.v3/yamlh.go	/^	foot_indent int  \/\/ The indent used to write the foot comment above, or -1 if none.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
format	vendor/github.com/davecgh/go-spew/spew/format.go	/^func (f *formatState) format(v reflect.Value) {$/;"	f	unknown:spew.formatState
formatListDiff	vendor/github.com/stretchr/testify/assert/assertions.go	/^func formatListDiff(listA, listB interface{}, extraA, extraB []interface{}) string {$/;"	f	package:assert	typeref:typename:string
formatPtr	vendor/github.com/davecgh/go-spew/spew/format.go	/^func (f *formatState) formatPtr(v reflect.Value) {$/;"	f	unknown:spew.formatState
formatRangeContext	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func formatRangeContext(start, stop int) string {$/;"	f	package:difflib	typeref:typename:string
formatRangeUnified	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func formatRangeUnified(start, stop int) string {$/;"	f	package:difflib	typeref:typename:string
formatState	vendor/github.com/davecgh/go-spew/spew/format.go	/^type formatState struct {$/;"	s	package:spew
formatUnequalValues	vendor/github.com/stretchr/testify/assert/assertions.go	/^func formatUnequalValues(expected, actual interface{}) (e string, a string) {$/;"	f	package:assert	typeref:typename:(e string, a string)
fs	vendor/github.com/davecgh/go-spew/spew/format.go	/^	fs             fmt.State$/;"	m	struct:spew.formatState	typeref:typename:fmt.State
fullBCount	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	fullBCount     map[string]int$/;"	m	struct:difflib.SequenceMatcher	typeref:typename:map[string]int
generalMapType	vendor/gopkg.in/yaml.v3/decode.go	/^	generalMapType = reflect.TypeOf(map[interface{}]interface{}{})$/;"	v	package:yaml
generalMapType	vendor/gopkg.in/yaml.v3/decode.go	/^	generalMapType reflect.Type$/;"	m	struct:yaml.decoder	typeref:typename:reflect.Type
getLen	vendor/github.com/stretchr/testify/assert/assertions.go	/^func getLen(x interface{}) (ok bool, length int) {$/;"	f	package:assert	typeref:typename:(ok bool, length int)
getStructInfo	vendor/gopkg.in/yaml.v3/yaml.go	/^func getStructInfo(st reflect.Type) (*structInfo, error) {$/;"	f	package:yaml	typeref:typename:(*structInfo, error)
handle	vendor/gopkg.in/yaml.v3/yamlh.go	/^	handle []byte \/\/ The tag handle.$/;"	m	struct:yaml.yaml_tag_directive_t	typeref:typename:[]byte
handleErr	vendor/gopkg.in/yaml.v3/yaml.go	/^func handleErr(err *error) {$/;"	f	package:yaml
handleMethods	vendor/github.com/davecgh/go-spew/spew/common.go	/^func handleMethods(cs *ConfigState, w io.Writer, v reflect.Value) (handled bool) {$/;"	f	package:spew	typeref:typename:(handled bool)
head	vendor/gopkg.in/yaml.v3/yamlh.go	/^	head []byte$/;"	m	struct:yaml.yaml_comment_t	typeref:typename:[]byte
head_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	head_comment []byte \/\/ The current head comments$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]byte
head_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	head_comment []byte$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]byte
head_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	head_comment []byte$/;"	m	struct:yaml.yaml_event_t	typeref:typename:[]byte
hexDigits	vendor/github.com/davecgh/go-spew/spew/common.go	/^var hexDigits = "0123456789abcdef"$/;"	v	package:spew
http	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^	http "net\/http"$/;"	P	package:net/http
http	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^	http "net\/http"$/;"	P	package:net/http
httpCode	vendor/github.com/stretchr/testify/assert/http_assertions.go	/^func httpCode(handler http.HandlerFunc, method, url string, values url.Values) (int, error) {$/;"	f	package:assert	typeref:typename:(int, error)
iBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	iBytes                = []byte("i")$/;"	v	package:spew
ifaceType	vendor/gopkg.in/yaml.v3/decode.go	/^	ifaceType      = generalMapType.Elem()$/;"	v	package:yaml
ignoreNextIndent	vendor/github.com/davecgh/go-spew/spew/dump.go	/^	ignoreNextIndent bool$/;"	m	struct:spew.dumpState	typeref:typename:bool
ignoreNextType	vendor/github.com/davecgh/go-spew/spew/dump.go	/^	ignoreNextType   bool$/;"	m	struct:spew.dumpState	typeref:typename:bool
ignoreNextType	vendor/github.com/davecgh/go-spew/spew/format.go	/^	ignoreNextType bool$/;"	m	struct:spew.formatState	typeref:typename:bool
implicit	vendor/gopkg.in/yaml.v3/yamlh.go	/^	implicit bool$/;"	m	struct:yaml.yaml_event_t	typeref:typename:bool
includeElement	vendor/github.com/stretchr/testify/assert/assertions.go	/^func includeElement(list interface{}, element interface{}) (ok, found bool) {$/;"	f	package:assert	typeref:typename:(ok, found bool)
indent	vendor/github.com/davecgh/go-spew/spew/dump.go	/^func (d *dumpState) indent() {$/;"	f	unknown:spew.dumpState
indent	vendor/gopkg.in/yaml.v3/encode.go	/^	indent   int$/;"	m	struct:yaml.encoder	typeref:typename:int
indent	vendor/gopkg.in/yaml.v3/yamlh.go	/^	indent  int   \/\/ The current indentation level.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
indent	vendor/gopkg.in/yaml.v3/yamlh.go	/^	indent int \/\/ The current indentation level.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
indentMessageLines	vendor/github.com/stretchr/testify/assert/assertions.go	/^func indentMessageLines(message string, longestLabelLen int) string {$/;"	f	package:assert	typeref:typename:string
indention	vendor/gopkg.in/yaml.v3/yamlh.go	/^	indention  bool \/\/ If the last character was an indentation character (' ', '-', '?', ':')?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
indents	vendor/gopkg.in/yaml.v3/yamlh.go	/^	indents []int \/\/ The indentation levels stack.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]int
indents	vendor/gopkg.in/yaml.v3/yamlh.go	/^	indents []int \/\/ The stack of indentation levels.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]int
index	vendor/gopkg.in/yaml.v3/yamlh.go	/^	index  int         \/\/ The node id.$/;"	m	struct:yaml.yaml_alias_data_t	typeref:typename:int
index	vendor/gopkg.in/yaml.v3/yamlh.go	/^	index  int \/\/ The position index.$/;"	m	struct:yaml.yaml_mark_t	typeref:typename:int
indicatedString	vendor/gopkg.in/yaml.v3/yaml.go	/^func (n *Node) indicatedString() bool {$/;"	f	unknown:yaml.Node	typeref:typename:bool
init	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^func init() {$/;"	f	package:spew
init	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) init() {$/;"	f	unknown:yaml.parser
init	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) init() {$/;"	f	unknown:yaml.encoder
init	vendor/gopkg.in/yaml.v3/resolve.go	/^func init() {$/;"	f	package:yaml
init	vendor/gopkg.in/yaml.v3/yaml.go	/^func init() {$/;"	f	package:yaml
initial_queue_size	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^	initial_queue_size  = 16$/;"	c	package:yaml
initial_stack_size	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^	initial_stack_size  = 16$/;"	c	package:yaml
initial_string_size	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^	initial_string_size = 16$/;"	c	package:yaml
input	vendor/gopkg.in/yaml.v3/yamlh.go	/^	input        []byte    \/\/ String input data.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]byte
input_buffer_size	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^	input_buffer_size = input_raw_buffer_size * 3$/;"	c	package:yaml
input_pos	vendor/gopkg.in/yaml.v3/yamlh.go	/^	input_pos    int$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
input_raw_buffer_size	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^	input_raw_buffer_size = 512$/;"	c	package:yaml
input_reader	vendor/gopkg.in/yaml.v3/yamlh.go	/^	input_reader io.Reader \/\/ File input data.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:io.Reader
int16Type	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	int16Type = reflect.TypeOf(int16(1))$/;"	v	package:assert
int32Type	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	int32Type = reflect.TypeOf(int32(1))$/;"	v	package:assert
int64Type	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	int64Type = reflect.TypeOf(int64(1))$/;"	v	package:assert
int8Type	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	int8Type  = reflect.TypeOf(int8(1))$/;"	v	package:assert
intTag	vendor/gopkg.in/yaml.v3/resolve.go	/^	intTag       = "!!int"$/;"	c	package:yaml
intType	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	intType   = reflect.TypeOf(int(1))$/;"	v	package:assert
interfaceBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	interfaceBytes        = []byte("(interface {})")$/;"	v	package:spew
intv	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) intv(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
invalidAngleBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	invalidAngleBytes     = []byte("<invalid>")$/;"	v	package:spew
isBJunk	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func (m *SequenceMatcher) isBJunk(s string) bool {$/;"	f	unknown:difflib.SequenceMatcher	typeref:typename:bool
isBase60Float	vendor/gopkg.in/yaml.v3/encode.go	/^func isBase60Float(s string) (result bool) {$/;"	f	package:yaml	typeref:typename:(result bool)
isEmpty	vendor/github.com/stretchr/testify/assert/assertions.go	/^func isEmpty(object interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
isFunction	vendor/github.com/stretchr/testify/assert/assertions.go	/^func isFunction(arg interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
isList	vendor/github.com/stretchr/testify/assert/assertions.go	/^func isList(t TestingT, list interface{}, msgAndArgs ...interface{}) (ok bool) {$/;"	f	package:assert	typeref:typename:(ok bool)
isMerge	vendor/gopkg.in/yaml.v3/decode.go	/^func isMerge(n *Node) bool {$/;"	f	package:yaml	typeref:typename:bool
isNil	vendor/github.com/stretchr/testify/assert/assertions.go	/^func isNil(object interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
isOldBool	vendor/gopkg.in/yaml.v3/encode.go	/^func isOldBool(s string) (result bool) {$/;"	f	package:yaml	typeref:typename:(result bool)
isOrdered	vendor/github.com/stretchr/testify/assert/assertion_order.go	/^func isOrdered(t TestingT, object interface{}, allowedComparesResults []CompareType, failMessage/;"	f	package:assert	typeref:typename:bool
isStringMap	vendor/gopkg.in/yaml.v3/decode.go	/^func isStringMap(n *Node) bool {$/;"	f	package:yaml	typeref:typename:bool
isTest	vendor/github.com/stretchr/testify/assert/assertions.go	/^func isTest(name, prefix string) bool {$/;"	f	package:assert	typeref:typename:bool
isZero	vendor/gopkg.in/yaml.v3/yaml.go	/^func isZero(v reflect.Value) bool {$/;"	f	package:yaml	typeref:typename:bool
is_alpha	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_alpha(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_ascii	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_ascii(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_blank	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_blank(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_blankz	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_blankz(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_bom	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_bom(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_break	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_break(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_breakz	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_breakz(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_crlf	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_crlf(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_digit	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_digit(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_hex	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_hex(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_printable	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_printable(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_space	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_space(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_spacez	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_spacez(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_tab	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_tab(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
is_z	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func is_z(b []byte, i int) bool {$/;"	f	package:yaml	typeref:typename:bool
key	vendor/gopkg.in/yaml.v3/yamlh.go	/^	key   int \/\/ The key of the element.$/;"	m	struct:yaml.yaml_node_pair_t	typeref:typename:int
keyFloat	vendor/gopkg.in/yaml.v3/sorter.go	/^func keyFloat(v reflect.Value) (f float64, ok bool) {$/;"	f	package:yaml	typeref:typename:(f float64, ok bool)
keyList	vendor/gopkg.in/yaml.v3/sorter.go	/^type keyList []reflect.Value$/;"	t	package:yaml
key_line_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	key_line_comment []byte$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]byte
knownFields	vendor/gopkg.in/yaml.v3/decode.go	/^	knownFields bool$/;"	m	struct:yaml.decoder	typeref:typename:bool
knownFields	vendor/gopkg.in/yaml.v3/yaml.go	/^	knownFields bool$/;"	m	struct:yaml.Decoder	typeref:typename:bool
label	vendor/github.com/stretchr/testify/assert/assertions.go	/^	label   string$/;"	m	struct:assert.labeledContent	typeref:typename:string
labeledContent	vendor/github.com/stretchr/testify/assert/assertions.go	/^type labeledContent struct {$/;"	s	package:assert
labeledOutput	vendor/github.com/stretchr/testify/assert/assertions.go	/^func labeledOutput(content ...labeledContent) string {$/;"	f	package:assert	typeref:typename:string
last_anchor_id	vendor/gopkg.in/yaml.v3/yamlh.go	/^	last_anchor_id int \/\/ The last assigned anchor id.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
lenEqualsBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	lenEqualsBytes        = []byte("len=")$/;"	v	package:spew
line	vendor/gopkg.in/yaml.v3/yamlh.go	/^	line       int  \/\/ The current line.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
line	vendor/gopkg.in/yaml.v3/yamlh.go	/^	line   int \/\/ The position line.$/;"	m	struct:yaml.yaml_mark_t	typeref:typename:int
line	vendor/gopkg.in/yaml.v3/yamlh.go	/^	line []byte$/;"	m	struct:yaml.yaml_comment_t	typeref:typename:[]byte
line_break	vendor/gopkg.in/yaml.v3/yamlh.go	/^	line_break  yaml_break_t \/\/ The preferred line break.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:yaml_break_t
line_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	line_comment []byte \/\/ The current line comments$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]byte
line_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	line_comment []byte$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]byte
line_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	line_comment []byte$/;"	m	struct:yaml.yaml_event_t	typeref:typename:[]byte
longTag	vendor/gopkg.in/yaml.v3/resolve.go	/^func longTag(tag string) string {$/;"	f	package:yaml	typeref:typename:string
longTagPrefix	vendor/gopkg.in/yaml.v3/resolve.go	/^const longTagPrefix = "tag:yaml.org,2002:"$/;"	c	package:yaml
longTags	vendor/gopkg.in/yaml.v3/resolve.go	/^var longTags = make(map[string]string)$/;"	v	package:yaml
main	cmd/yc/main.go	/^func main() {$/;"	f	package:main
main	cmd/yc/main.go	/^package main$/;"	p
major	vendor/gopkg.in/yaml.v3/yamlh.go	/^	major int8 \/\/ The major version number.$/;"	m	struct:yaml.yaml_version_directive_t	typeref:typename:int8
major	vendor/gopkg.in/yaml.v3/yamlh.go	/^	major, minor int8$/;"	m	struct:yaml.yaml_token_t	typeref:typename:int8
mapTag	vendor/gopkg.in/yaml.v3/resolve.go	/^	mapTag       = "!!map"$/;"	c	package:yaml
mapping	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) mapping(n *Node, out reflect.Value) (good bool) {$/;"	f	unknown:yaml.decoder	typeref:typename:(good bool)
mapping	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) mapping() *Node {$/;"	f	unknown:yaml.parser	typeref:typename:*Node
mapping	vendor/gopkg.in/yaml.v3/yamlh.go	/^	mapping struct {$/;"	m	struct:yaml.yaml_node_t	typeref:typename:struct { pairs_data []yaml_node_pair_t ; pairs_start *yaml_node_pair_t ; pairs_end *yaml_node_pair_t ; pairs_top *yaml_node_pair_t ; style yaml_mapping_style_t ; }
mappingStruct	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) mappingStruct(n *Node, out reflect.Value) (good bool) {$/;"	f	unknown:yaml.decoder	typeref:typename:(good bool)
mapping_context	vendor/gopkg.in/yaml.v3/yamlh.go	/^	mapping_context    bool \/\/ Is it a mapping context?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
mapping_style	vendor/gopkg.in/yaml.v3/yamlh.go	/^func (e *yaml_event_t) mapping_style() yaml_mapping_style_t   { return yaml_mapping_style_t(e.st/;"	f	unknown:yaml.yaml_event_t	typeref:typename:yaml_mapping_style_t
mappingv	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) mappingv(tag string, f func()) {$/;"	f	unknown:yaml.encoder
mapv	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) mapv(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	mark         yaml_mark_t \/\/ The position mark.$/;"	m	struct:yaml.yaml_simple_key_t	typeref:typename:yaml_mark_t
mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	mark   yaml_mark_t \/\/ The anchor mark.$/;"	m	struct:yaml.yaml_alias_data_t	typeref:typename:yaml_mark_t
mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	mark   yaml_mark_t \/\/ The mark of the current position.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:yaml_mark_t
marks	vendor/gopkg.in/yaml.v3/yamlh.go	/^	marks          []yaml_mark_t          \/\/ The stack of marks.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]yaml_mark_t
marshal	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) marshal(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
marshalDoc	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) marshalDoc(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
matchRegexp	vendor/github.com/stretchr/testify/assert/assertions.go	/^func matchRegexp(rx interface{}, str interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
matchingBlocks	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	matchingBlocks []Match$/;"	m	struct:difflib.SequenceMatcher	typeref:typename:[]Match
max	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func max(a, b int) int {$/;"	f	package:difflib	typeref:typename:int
maxNewlineBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	maxNewlineBytes       = []byte("<max depth reached>\\n")$/;"	v	package:spew
maxShortBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	maxShortBytes         = []byte("<max>")$/;"	v	package:spew
max_flow_level	vendor/gopkg.in/yaml.v3/scannerc.go	/^const max_flow_level = 10000$/;"	c	package:yaml
max_indents	vendor/gopkg.in/yaml.v3/scannerc.go	/^const max_indents = 10000$/;"	c	package:yaml
max_number_length	vendor/gopkg.in/yaml.v3/scannerc.go	/^const max_number_length = 2$/;"	c	package:yaml
merge	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) merge(n *Node, out reflect.Value) {$/;"	f	unknown:yaml.decoder
mergeTag	vendor/gopkg.in/yaml.v3/resolve.go	/^	mergeTag     = "!!merge"$/;"	c	package:yaml
messageFromMsgAndArgs	vendor/github.com/stretchr/testify/assert/assertions.go	/^func messageFromMsgAndArgs(msgAndArgs ...interface{}) string {$/;"	f	package:assert	typeref:typename:string
min	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^func min(a, b int) int {$/;"	f	package:difflib	typeref:typename:int
minor	vendor/gopkg.in/yaml.v3/yamlh.go	/^	major, minor int8$/;"	m	struct:yaml.yaml_token_t	typeref:typename:int8
minor	vendor/gopkg.in/yaml.v3/yamlh.go	/^	minor int8 \/\/ The minor version number.$/;"	m	struct:yaml.yaml_version_directive_t	typeref:typename:int8
must	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) must(ok bool) {$/;"	f	unknown:yaml.encoder
newDecoder	vendor/gopkg.in/yaml.v3/decode.go	/^func newDecoder() *decoder {$/;"	f	package:yaml	typeref:typename:*decoder
newEncoder	vendor/gopkg.in/yaml.v3/encode.go	/^func newEncoder() *encoder {$/;"	f	package:yaml	typeref:typename:*encoder
newEncoderWithWriter	vendor/gopkg.in/yaml.v3/encode.go	/^func newEncoderWithWriter(w io.Writer) *encoder {$/;"	f	package:yaml	typeref:typename:*encoder
newFormatter	vendor/github.com/davecgh/go-spew/spew/format.go	/^func newFormatter(cs *ConfigState, v interface{}) fmt.Formatter {$/;"	f	package:spew	typeref:typename:fmt.Formatter
newParser	vendor/gopkg.in/yaml.v3/decode.go	/^func newParser(b []byte) *parser {$/;"	f	package:yaml	typeref:typename:*parser
newParserFromReader	vendor/gopkg.in/yaml.v3/decode.go	/^func newParserFromReader(r io.Reader) *parser {$/;"	f	package:yaml	typeref:typename:*parser
newValuesSorter	vendor/github.com/davecgh/go-spew/spew/common.go	/^func newValuesSorter(values []reflect.Value, cs *ConfigState) sort.Interface {$/;"	f	package:spew	typeref:typename:sort.Interface
newlineBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	newlineBytes          = []byte("\\n")$/;"	v	package:spew
newlines	vendor/gopkg.in/yaml.v3/yamlh.go	/^	newlines int \/\/ The number of line breaks since last non-break\/non-blank character$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
nilAngleBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	nilAngleBytes         = []byte("<nil>")$/;"	v	package:spew
nilv	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) nilv() {$/;"	f	unknown:yaml.encoder
node	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) node(kind Kind, defaultTag, tag, value string) *Node {$/;"	f	unknown:yaml.parser	typeref:typename:*Node
node	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) node(node *Node, tail string) {$/;"	f	unknown:yaml.encoder
nodeType	vendor/gopkg.in/yaml.v3/decode.go	/^	nodeType       = reflect.TypeOf(Node{})$/;"	v	package:yaml
nodes	vendor/gopkg.in/yaml.v3/yamlh.go	/^	nodes []yaml_node_t$/;"	m	struct:yaml.yaml_document_t	typeref:typename:[]yaml_node_t
nodev	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) nodev(in reflect.Value) {$/;"	f	unknown:yaml.encoder
null	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) null(out reflect.Value) bool {$/;"	f	unknown:yaml.decoder	typeref:typename:bool
nullTag	vendor/gopkg.in/yaml.v3/resolve.go	/^	nullTag      = "!!null"$/;"	c	package:yaml
numLess	vendor/gopkg.in/yaml.v3/sorter.go	/^func numLess(a, b reflect.Value) bool {$/;"	f	package:yaml	typeref:typename:bool
obsoleteUnmarshaler	vendor/gopkg.in/yaml.v3/yaml.go	/^type obsoleteUnmarshaler interface {$/;"	i	package:yaml
offset	vendor/gopkg.in/yaml.v3/yamlh.go	/^	offset int         \/\/ The offset of the current position (in bytes).$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
offsetFlag	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^	offsetFlag   = uintptr(ptrSize * 2)$/;"	v	package:spew
offsetPtr	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^	offsetPtr    = uintptr(ptrSize)$/;"	v	package:spew
offsetScalar	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^	offsetScalar = uintptr(0)$/;"	v	package:spew
opCodes	vendor/github.com/pmezard/go-difflib/difflib/difflib.go	/^	opCodes        []OpCode$/;"	m	struct:difflib.SequenceMatcher	typeref:typename:[]OpCode
openAngleBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	openAngleBytes        = []byte("<")$/;"	v	package:spew
openBraceBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	openBraceBytes        = []byte("{")$/;"	v	package:spew
openBraceNewlineBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	openBraceNewlineBytes = []byte("{\\n")$/;"	v	package:spew
openBracketBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	openBracketBytes      = []byte("[")$/;"	v	package:spew
openMapBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	openMapBytes          = []byte("map[")$/;"	v	package:spew
openParenBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	openParenBytes        = []byte("(")$/;"	v	package:spew
open_ended	vendor/gopkg.in/yaml.v3/yamlh.go	/^	open_ended bool \/\/ If an explicit document end is required?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
opened	vendor/gopkg.in/yaml.v3/yamlh.go	/^	opened bool \/\/ If the stream was already opened?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
out	vendor/gopkg.in/yaml.v3/encode.go	/^	out      []byte$/;"	m	struct:yaml.encoder	typeref:typename:[]byte
output_buffer	vendor/gopkg.in/yaml.v3/yamlh.go	/^	output_buffer *[]byte   \/\/ String output data.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:*[]byte
output_buffer_size	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^	output_buffer_size = 128$/;"	c	package:yaml
output_raw_buffer_size	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^	output_raw_buffer_size = (output_buffer_size*2 + 2)$/;"	c	package:yaml
output_writer	vendor/gopkg.in/yaml.v3/yamlh.go	/^	output_writer io.Writer \/\/ File output data.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:io.Writer
panicBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	panicBytes            = []byte("(PANIC=")$/;"	v	package:spew
parse	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) parse() *Node {$/;"	f	unknown:yaml.parser	typeref:typename:*Node
parseChild	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) parseChild(parent *Node) *Node {$/;"	f	unknown:yaml.parser	typeref:typename:*Node
parseTimestamp	vendor/gopkg.in/yaml.v3/resolve.go	/^func parseTimestamp(s string) (time.Time, bool) {$/;"	f	package:yaml	typeref:typename:(time.Time, bool)
parser	vendor/gopkg.in/yaml.v3/decode.go	/^	parser   yaml_parser_t$/;"	m	struct:yaml.parser	typeref:typename:yaml_parser_t
parser	vendor/gopkg.in/yaml.v3/decode.go	/^type parser struct {$/;"	s	package:yaml
parser	vendor/gopkg.in/yaml.v3/yaml.go	/^	parser      *parser$/;"	m	struct:yaml.Decoder	typeref:typename:*parser
peek	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) peek() yaml_event_type_t {$/;"	f	unknown:yaml.parser	typeref:typename:yaml_event_type_t
peek_token	vendor/gopkg.in/yaml.v3/parserc.go	/^func peek_token(parser *yaml_parser_t) *yaml_token_t {$/;"	f	package:yaml	typeref:typename:*yaml_token_t
percentBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	percentBytes          = []byte("%")$/;"	v	package:spew
plusBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	plusBytes             = []byte("+")$/;"	v	package:spew
pointerChainBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	pointerChainBytes     = []byte("->")$/;"	v	package:spew
pointers	vendor/github.com/davecgh/go-spew/spew/dump.go	/^	pointers         map[uintptr]int$/;"	m	struct:spew.dumpState	typeref:typename:map[uintptr]int
pointers	vendor/github.com/davecgh/go-spew/spew/format.go	/^	pointers       map[uintptr]int$/;"	m	struct:spew.formatState	typeref:typename:map[uintptr]int
possible	vendor/gopkg.in/yaml.v3/yamlh.go	/^	possible     bool        \/\/ Is a simple key possible?$/;"	m	struct:yaml.yaml_simple_key_t	typeref:typename:bool
precisionBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	precisionBytes        = []byte(".")$/;"	v	package:spew
prefix	vendor/gopkg.in/yaml.v3/yamlh.go	/^	prefix []byte \/\/ The tag prefix.$/;"	m	struct:yaml.yaml_tag_directive_t	typeref:typename:[]byte
prefix	vendor/gopkg.in/yaml.v3/yamlh.go	/^	prefix []byte$/;"	m	struct:yaml.yaml_token_t	typeref:typename:[]byte
prepare	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) prepare(n *Node, out reflect.Value) (newout reflect.Value, unmarshaled, good b/;"	f	unknown:yaml.decoder	typeref:typename:(newout reflect.Value, unmarshaled, good bool)
printBool	vendor/github.com/davecgh/go-spew/spew/common.go	/^func printBool(w io.Writer, val bool) {$/;"	f	package:spew
printComplex	vendor/github.com/davecgh/go-spew/spew/common.go	/^func printComplex(w io.Writer, c complex128, floatPrecision int) {$/;"	f	package:spew
printFloat	vendor/github.com/davecgh/go-spew/spew/common.go	/^func printFloat(w io.Writer, val float64, precision int) {$/;"	f	package:spew
printHexPtr	vendor/github.com/davecgh/go-spew/spew/common.go	/^func printHexPtr(w io.Writer, p uintptr) {$/;"	f	package:spew
printInt	vendor/github.com/davecgh/go-spew/spew/common.go	/^func printInt(w io.Writer, val int64, base int) {$/;"	f	package:spew
printUint	vendor/github.com/davecgh/go-spew/spew/common.go	/^func printUint(w io.Writer, val uint64, base int) {$/;"	f	package:spew
problem	vendor/gopkg.in/yaml.v3/yamlh.go	/^	problem string            \/\/ Error description.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:string
problem	vendor/gopkg.in/yaml.v3/yamlh.go	/^	problem string \/\/ Error description.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:string
problem_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	problem_mark   yaml_mark_t$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:yaml_mark_t
problem_offset	vendor/gopkg.in/yaml.v3/yamlh.go	/^	problem_offset int$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
problem_value	vendor/gopkg.in/yaml.v3/yamlh.go	/^	problem_value  int$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
processMap	converter.go	/^func processMap(prefix string, vv map[string]interface{}, acc *[]string) error {$/;"	f	package:strval	typeref:typename:error
processSlice	converter.go	/^func processSlice(prefix string, vv []interface{}, acc *[]string) error {$/;"	f	package:strval	typeref:typename:error
processValue	converter.go	/^func processValue(prefix string, v interface{}, acc *[]string) error {$/;"	f	package:strval	typeref:typename:error
ptrSize	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^	ptrSize = unsafe.Sizeof((*byte)(nil))$/;"	c	package:spew
ptrTimeType	vendor/gopkg.in/yaml.v3/decode.go	/^	ptrTimeType    = reflect.TypeOf(&time.Time{})$/;"	v	package:yaml
put	vendor/gopkg.in/yaml.v3/emitterc.go	/^func put(emitter *yaml_emitter_t, value byte) bool {$/;"	f	package:yaml	typeref:typename:bool
put_break	vendor/gopkg.in/yaml.v3/emitterc.go	/^func put_break(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
quoted_implicit	vendor/gopkg.in/yaml.v3/yamlh.go	/^	quoted_implicit bool$/;"	m	struct:yaml.yaml_event_t	typeref:typename:bool
raw_buffer	vendor/gopkg.in/yaml.v3/yamlh.go	/^	raw_buffer     []byte \/\/ The raw buffer.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]byte
raw_buffer	vendor/gopkg.in/yaml.v3/yamlh.go	/^	raw_buffer     []byte \/\/ The raw buffer.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]byte
raw_buffer_pos	vendor/gopkg.in/yaml.v3/yamlh.go	/^	raw_buffer_pos int    \/\/ The current position of the buffer.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:int
raw_buffer_pos	vendor/gopkg.in/yaml.v3/yamlh.go	/^	raw_buffer_pos int    \/\/ The current position of the buffer.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
read	vendor/gopkg.in/yaml.v3/scannerc.go	/^func read(parser *yaml_parser_t, s []byte) []byte {$/;"	f	package:yaml	typeref:typename:[]byte
read_handler	vendor/gopkg.in/yaml.v3/yamlh.go	/^	read_handler yaml_read_handler_t \/\/ Read handler.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:yaml_read_handler_t
read_line	vendor/gopkg.in/yaml.v3/scannerc.go	/^func read_line(parser *yaml_parser_t, s []byte) []byte {$/;"	f	package:yaml	typeref:typename:[]byte
required	vendor/gopkg.in/yaml.v3/yamlh.go	/^	required     bool        \/\/ Is a simple key required?$/;"	m	struct:yaml.yaml_simple_key_t	typeref:typename:bool
resetMap	vendor/gopkg.in/yaml.v3/decode.go	/^func resetMap(out reflect.Value) {$/;"	f	package:yaml
resolvableTag	vendor/gopkg.in/yaml.v3/resolve.go	/^func resolvableTag(tag string) bool {$/;"	f	package:yaml	typeref:typename:bool
resolve	vendor/gopkg.in/yaml.v3/resolve.go	/^func resolve(tag string, in string) (rtag string, out interface{}) {$/;"	f	package:yaml	typeref:typename:(rtag string, out interface{})
resolveMap	vendor/gopkg.in/yaml.v3/resolve.go	/^var resolveMap = make(map[string]resolveMapItem)$/;"	v	package:yaml
resolveMapItem	vendor/gopkg.in/yaml.v3/resolve.go	/^type resolveMapItem struct {$/;"	s	package:yaml
resolveTable	vendor/gopkg.in/yaml.v3/resolve.go	/^var resolveTable = make([]byte, 256)$/;"	v	package:yaml
root_context	vendor/gopkg.in/yaml.v3/yamlh.go	/^	root_context       bool \/\/ Is it the document root context?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
samePointers	vendor/github.com/stretchr/testify/assert/assertions.go	/^func samePointers(first, second interface{}) bool {$/;"	f	package:assert	typeref:typename:bool
scalar	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) scalar(n *Node, out reflect.Value) bool {$/;"	f	unknown:yaml.decoder	typeref:typename:bool
scalar	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) scalar() *Node {$/;"	f	unknown:yaml.parser	typeref:typename:*Node
scalar	vendor/gopkg.in/yaml.v3/yamlh.go	/^	scalar struct {$/;"	m	struct:yaml.yaml_node_t	typeref:typename:struct { value []byte ; length int ; style yaml_scalar_style_t ; }
scalar_data	vendor/gopkg.in/yaml.v3/yamlh.go	/^	scalar_data struct {$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:struct { value []byte ; multiline bool ; flow_plain_allowed bool ; block_plain_allowed bool ; single_quoted_allowed bool ; block_allowed bool ; style yaml_scalar_style_t ; }
scalar_style	vendor/gopkg.in/yaml.v3/yamlh.go	/^func (e *yaml_event_t) scalar_style() yaml_scalar_style_t     { return yaml_scalar_style_t(e.sty/;"	f	unknown:yaml.yaml_event_t	typeref:typename:yaml_scalar_style_t
scan_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	scan_mark  yaml_mark_t \/\/ Position where scanning for comments started$/;"	m	struct:yaml.yaml_comment_t	typeref:typename:yaml_mark_t
seqTag	vendor/gopkg.in/yaml.v3/resolve.go	/^	seqTag       = "!!seq"$/;"	c	package:yaml
sequence	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) sequence(n *Node, out reflect.Value) (good bool) {$/;"	f	unknown:yaml.decoder	typeref:typename:(good bool)
sequence	vendor/gopkg.in/yaml.v3/decode.go	/^func (p *parser) sequence() *Node {$/;"	f	unknown:yaml.parser	typeref:typename:*Node
sequence	vendor/gopkg.in/yaml.v3/yamlh.go	/^	sequence struct {$/;"	m	struct:yaml.yaml_node_t	typeref:typename:struct { items_data []yaml_node_item_t ; style yaml_sequence_style_t ; }
sequence_context	vendor/gopkg.in/yaml.v3/yamlh.go	/^	sequence_context   bool \/\/ Is it a sequence context?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
sequence_style	vendor/gopkg.in/yaml.v3/yamlh.go	/^func (e *yaml_event_t) sequence_style() yaml_sequence_style_t { return yaml_sequence_style_t(e.s/;"	f	unknown:yaml.yaml_event_t	typeref:typename:yaml_sequence_style_t
settableValueOf	vendor/gopkg.in/yaml.v3/decode.go	/^func settableValueOf(i interface{}) reflect.Value {$/;"	f	package:yaml	typeref:typename:reflect.Value
shortTag	vendor/gopkg.in/yaml.v3/resolve.go	/^func shortTag(tag string) string {$/;"	f	package:yaml	typeref:typename:string
shortTags	vendor/gopkg.in/yaml.v3/resolve.go	/^var shortTags = make(map[string]string)$/;"	v	package:yaml
simple_key_allowed	vendor/gopkg.in/yaml.v3/yamlh.go	/^	simple_key_allowed bool                \/\/ May a simple key occur at the current position?$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:bool
simple_key_context	vendor/gopkg.in/yaml.v3/yamlh.go	/^	simple_key_context bool \/\/ Is it a simple mapping key context?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
simple_keys	vendor/gopkg.in/yaml.v3/yamlh.go	/^	simple_keys        []yaml_simple_key_t \/\/ The stack of simple keys.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]yaml_simple_key_t
simple_keys_by_tok	vendor/gopkg.in/yaml.v3/yamlh.go	/^	simple_keys_by_tok map[int]int         \/\/ possible simple_key indexes indexed by token_number$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:map[int]int
skip	vendor/gopkg.in/yaml.v3/scannerc.go	/^func skip(parser *yaml_parser_t) {$/;"	f	package:yaml
skip_line	vendor/gopkg.in/yaml.v3/scannerc.go	/^func skip_line(parser *yaml_parser_t) {$/;"	f	package:yaml
skip_token	vendor/gopkg.in/yaml.v3/parserc.go	/^func skip_token(parser *yaml_parser_t) {$/;"	f	package:yaml
slicev	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) slicev(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
sortValues	vendor/github.com/davecgh/go-spew/spew/common.go	/^func sortValues(values []reflect.Value, cs *ConfigState) {$/;"	f	package:spew
spaceBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	spaceBytes            = []byte(" ")$/;"	v	package:spew
space_above	vendor/gopkg.in/yaml.v3/yamlh.go	/^	space_above bool \/\/ Is there's an empty line above?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
spew	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^package spew$/;"	p
spew	vendor/github.com/davecgh/go-spew/spew/bypasssafe.go	/^package spew$/;"	p
spew	vendor/github.com/davecgh/go-spew/spew/common.go	/^package spew$/;"	p
spew	vendor/github.com/davecgh/go-spew/spew/config.go	/^package spew$/;"	p
spew	vendor/github.com/davecgh/go-spew/spew/doc.go	/^package spew$/;"	p
spew	vendor/github.com/davecgh/go-spew/spew/dump.go	/^package spew$/;"	p
spew	vendor/github.com/davecgh/go-spew/spew/format.go	/^package spew$/;"	p
spew	vendor/github.com/davecgh/go-spew/spew/spew.go	/^package spew$/;"	p
spewConfig	vendor/github.com/stretchr/testify/assert/assertions.go	/^var spewConfig = spew.ConfigState{$/;"	v	package:assert
start_implicit	vendor/gopkg.in/yaml.v3/yamlh.go	/^	start_implicit int \/\/ Is the document start indicator implicit?$/;"	m	struct:yaml.yaml_document_t	typeref:typename:int
start_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	start_mark yaml_mark_t \/\/ Position of '#' comment mark$/;"	m	struct:yaml.yaml_comment_t	typeref:typename:yaml_mark_t
start_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	start_mark yaml_mark_t \/\/ The beginning of the node.$/;"	m	struct:yaml.yaml_node_t	typeref:typename:yaml_mark_t
start_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	start_mark, end_mark yaml_mark_t$/;"	m	struct:yaml.yaml_document_t	typeref:typename:yaml_mark_t
start_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	start_mark, end_mark yaml_mark_t$/;"	m	struct:yaml.yaml_event_t	typeref:typename:yaml_mark_t
start_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	start_mark, end_mark yaml_mark_t$/;"	m	struct:yaml.yaml_token_t	typeref:typename:yaml_mark_t
state	vendor/gopkg.in/yaml.v3/yamlh.go	/^	state          yaml_parser_state_t    \/\/ The current parser state.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:yaml_parser_state_t
state	vendor/gopkg.in/yaml.v3/yamlh.go	/^	state  yaml_emitter_state_t   \/\/ The current emitter state.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:yaml_emitter_state_t
states	vendor/gopkg.in/yaml.v3/yamlh.go	/^	states         []yaml_parser_state_t  \/\/ The parser states stack.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]yaml_parser_state_t
states	vendor/gopkg.in/yaml.v3/yamlh.go	/^	states []yaml_emitter_state_t \/\/ The stack of states.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]yaml_emitter_state_t
stem_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	stem_comment []byte \/\/ Comment in item preceding a nested structure (list inside list item, e/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]byte
strTag	vendor/gopkg.in/yaml.v3/resolve.go	/^	strTag       = "!!str"$/;"	c	package:yaml
stream_end_produced	vendor/gopkg.in/yaml.v3/yamlh.go	/^	stream_end_produced   bool \/\/ Have we reached the end of the input stream?$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:bool
stream_start_produced	vendor/gopkg.in/yaml.v3/yamlh.go	/^	stream_start_produced bool \/\/ Have we started to scan the input stream?$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:bool
stringMapType	vendor/gopkg.in/yaml.v3/decode.go	/^	stringMapType  = reflect.TypeOf(map[string]interface{}{})$/;"	v	package:yaml
stringMapType	vendor/gopkg.in/yaml.v3/decode.go	/^	stringMapType  reflect.Type$/;"	m	struct:yaml.decoder	typeref:typename:reflect.Type
stringType	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	stringType = reflect.TypeOf("")$/;"	v	package:assert
strings	vendor/github.com/davecgh/go-spew/spew/common.go	/^	strings []string \/\/ either nil or same len and values$/;"	m	struct:spew.valuesSorter	typeref:typename:[]string
stringv	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) stringv(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
structInfo	vendor/gopkg.in/yaml.v3/yaml.go	/^type structInfo struct {$/;"	s	package:yaml
structMap	vendor/gopkg.in/yaml.v3/yaml.go	/^var structMap = make(map[reflect.Type]*structInfo)$/;"	v	package:yaml
structv	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) structv(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
strval	README.md	/^# strval$/;"	c
strval	converter.go	/^package strval$/;"	p
strval	converter_test.go	/^	strval "github.com\/jcmuller\/strval"$/;"	P	package:github.com/jcmuller/strval
strval_test	converter_test.go	/^package strval_test$/;"	p
style	vendor/gopkg.in/yaml.v3/yamlh.go	/^	style yaml_scalar_style_t$/;"	m	struct:yaml.yaml_token_t	typeref:typename:yaml_scalar_style_t
style	vendor/gopkg.in/yaml.v3/yamlh.go	/^	style yaml_style_t$/;"	m	struct:yaml.yaml_event_t	typeref:typename:yaml_style_t
suffix	vendor/gopkg.in/yaml.v3/yamlh.go	/^	suffix []byte$/;"	m	struct:yaml.yaml_token_t	typeref:typename:[]byte
supportedFlags	vendor/github.com/davecgh/go-spew/spew/format.go	/^const supportedFlags = "0-+# "$/;"	c	package:spew
t	vendor/github.com/stretchr/testify/assert/forward_assertions.go	/^	t TestingT$/;"	m	struct:assert.Assertions	typeref:typename:TestingT
tHelper	vendor/github.com/stretchr/testify/assert/assertions.go	/^type tHelper interface {$/;"	i	package:assert
tag	vendor/gopkg.in/yaml.v3/resolve.go	/^	tag   string$/;"	m	struct:yaml.resolveMapItem	typeref:typename:string
tag	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tag []byte           \/\/ The node tag.$/;"	m	struct:yaml.yaml_node_t	typeref:typename:[]byte
tag	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tag []byte$/;"	m	struct:yaml.yaml_event_t	typeref:typename:[]byte
tag_data	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tag_data struct {$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:struct { handle []byte ; suffix []byte ; }
tag_directives	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tag_directives []yaml_tag_directive_t \/\/ The list of TAG directives.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]yaml_tag_directive_t
tag_directives	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tag_directives []yaml_tag_directive_t \/\/ The list of tag directives.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]yaml_tag_directive_t
tag_directives	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tag_directives []yaml_tag_directive_t$/;"	m	struct:yaml.yaml_event_t	typeref:typename:[]yaml_tag_directive_t
tag_directives_data	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tag_directives_data  []yaml_tag_directive_t$/;"	m	struct:yaml.yaml_document_t	typeref:typename:[]yaml_tag_directive_t
tag_directives_end	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tag_directives_end   int \/\/ The end of the tag directives list.$/;"	m	struct:yaml.yaml_document_t	typeref:typename:int
tag_directives_start	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tag_directives_start int \/\/ The beginning of the tag directives list.$/;"	m	struct:yaml.yaml_document_t	typeref:typename:int
tail_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tail_comment []byte \/\/ Foot comment that happens at the end of a block.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]byte
tail_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tail_comment []byte$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:[]byte
tail_comment	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tail_comment []byte$/;"	m	struct:yaml.yaml_event_t	typeref:typename:[]byte
terror	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) terror(n *Node, tag string, out reflect.Value) {$/;"	f	unknown:yaml.decoder
terrors	vendor/gopkg.in/yaml.v3/decode.go	/^	terrors []string$/;"	m	struct:yaml.decoder	typeref:typename:[]string
testdata	converter_test.go	/^	testdata embed.FS$/;"	v	package:strval_test
textless	vendor/gopkg.in/yaml.v3/decode.go	/^	textless bool$/;"	m	struct:yaml.parser	typeref:typename:bool
time	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^	time "time"$/;"	P	package:time
time	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^	time "time"$/;"	P	package:time
timeType	vendor/gopkg.in/yaml.v3/decode.go	/^	timeType       = reflect.TypeOf(time.Time{})$/;"	v	package:yaml
timestampTag	vendor/gopkg.in/yaml.v3/resolve.go	/^	timestampTag = "!!timestamp"$/;"	c	package:yaml
timev	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) timev(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
toFloat	vendor/github.com/stretchr/testify/assert/assertions.go	/^func toFloat(x interface{}) (float64, bool) {$/;"	f	package:assert	typeref:typename:(float64, bool)
token_available	vendor/gopkg.in/yaml.v3/yamlh.go	/^	token_available bool           \/\/ Does the tokens queue contain a token ready for dequeueing.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:bool
token_mark	vendor/gopkg.in/yaml.v3/yamlh.go	/^	token_mark yaml_mark_t \/\/ Position after which tokens will be associated with this comment$/;"	m	struct:yaml.yaml_comment_t	typeref:typename:yaml_mark_t
token_number	vendor/gopkg.in/yaml.v3/yamlh.go	/^	token_number int         \/\/ The number of the token.$/;"	m	struct:yaml.yaml_simple_key_t	typeref:typename:int
tokens	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tokens          []yaml_token_t \/\/ The tokens queue.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:[]yaml_token_t
tokens_head	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tokens_head     int            \/\/ The head of the tokens queue.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
tokens_parsed	vendor/gopkg.in/yaml.v3/yamlh.go	/^	tokens_parsed   int            \/\/ The number of tokens fetched from the queue.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
trace	vendor/gopkg.in/yaml.v3/scannerc.go	/^func trace(args ...interface{}) func() {$/;"	f	package:yaml	typeref:typename:func()
trueBytes	vendor/github.com/davecgh/go-spew/spew/common.go	/^	trueBytes             = []byte("true")$/;"	v	package:spew
truncatingFormat	vendor/github.com/stretchr/testify/assert/assertions.go	/^func truncatingFormat(data interface{}) string {$/;"	f	package:assert	typeref:typename:string
typ	vendor/gopkg.in/yaml.v3/yamlh.go	/^	typ yaml_event_type_t$/;"	m	struct:yaml.yaml_event_t	typeref:typename:yaml_event_type_t
typ	vendor/gopkg.in/yaml.v3/yamlh.go	/^	typ yaml_node_type_t \/\/ The node type.$/;"	m	struct:yaml.yaml_node_t	typeref:typename:yaml_node_type_t
typ	vendor/gopkg.in/yaml.v3/yamlh.go	/^	typ yaml_token_type_t$/;"	m	struct:yaml.yaml_token_t	typeref:typename:yaml_token_type_t
typeAndKind	vendor/github.com/stretchr/testify/assert/assertions.go	/^func typeAndKind(v interface{}) (reflect.Type, reflect.Kind) {$/;"	f	package:assert	typeref:typename:(reflect.Type, reflect.Kind)
uint16Type	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	uint16Type = reflect.TypeOf(uint16(1))$/;"	v	package:assert
uint32Type	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	uint32Type = reflect.TypeOf(uint32(1))$/;"	v	package:assert
uint64Type	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	uint64Type = reflect.TypeOf(uint64(1))$/;"	v	package:assert
uint8Type	vendor/github.com/davecgh/go-spew/spew/dump.go	/^	uint8Type = reflect.TypeOf(uint8(0))$/;"	v	package:spew
uint8Type	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	uint8Type  = reflect.TypeOf(uint8(1))$/;"	v	package:assert
uintType	vendor/github.com/stretchr/testify/assert/assertion_compare.go	/^	uintType   = reflect.TypeOf(uint(1))$/;"	v	package:assert
uintv	vendor/gopkg.in/yaml.v3/encode.go	/^func (e *encoder) uintv(tag string, in reflect.Value) {$/;"	f	unknown:yaml.encoder
unicode	vendor/gopkg.in/yaml.v3/yamlh.go	/^	unicode     bool         \/\/ Allow unescaped non-ASCII characters?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
uniqueKeys	vendor/gopkg.in/yaml.v3/decode.go	/^	uniqueKeys  bool$/;"	m	struct:yaml.decoder	typeref:typename:bool
unmarshal	vendor/gopkg.in/yaml.v3/decode.go	/^func (d *decoder) unmarshal(n *Node, out reflect.Value) (good bool) {$/;"	f	unknown:yaml.decoder	typeref:typename:(good bool)
unmarshal	vendor/gopkg.in/yaml.v3/yaml.go	/^func unmarshal(in []byte, out interface{}, strict bool) (err error) {$/;"	f	package:yaml	typeref:typename:(err error)
unmarshalerType	vendor/gopkg.in/yaml.v3/yaml.go	/^var unmarshalerType reflect.Type$/;"	v	package:yaml
unpackValue	vendor/github.com/davecgh/go-spew/spew/dump.go	/^func (d *dumpState) unpackValue(v reflect.Value) reflect.Value {$/;"	f	unknown:spew.dumpState	typeref:typename:reflect.Value
unpackValue	vendor/github.com/davecgh/go-spew/spew/format.go	/^func (f *formatState) unpackValue(v reflect.Value) reflect.Value {$/;"	f	unknown:spew.formatState	typeref:typename:reflect.Value
unread	vendor/gopkg.in/yaml.v3/yamlh.go	/^	unread int \/\/ The number of unread characters in the buffer.$/;"	m	struct:yaml.yaml_parser_t	typeref:typename:int
unsafeReflectValue	vendor/github.com/davecgh/go-spew/spew/bypass.go	/^func unsafeReflectValue(v reflect.Value) (rv reflect.Value) {$/;"	f	package:spew	typeref:typename:(rv reflect.Value)
unsafeReflectValue	vendor/github.com/davecgh/go-spew/spew/bypasssafe.go	/^func unsafeReflectValue(v reflect.Value) reflect.Value {$/;"	f	package:spew	typeref:typename:reflect.Value
url	vendor/github.com/stretchr/testify/assert/assertion_format.go	/^	url "net\/url"$/;"	P	package:net/url
url	vendor/github.com/stretchr/testify/assert/assertion_forward.go	/^	url "net\/url"$/;"	P	package:net/url
validateEqualArgs	vendor/github.com/stretchr/testify/assert/assertions.go	/^func validateEqualArgs(expected, actual interface{}) error {$/;"	f	package:assert	typeref:typename:error
value	vendor/github.com/davecgh/go-spew/spew/format.go	/^	value          interface{}$/;"	m	struct:spew.formatState	typeref:typename:interface{}
value	vendor/gopkg.in/yaml.v3/resolve.go	/^	value interface{}$/;"	m	struct:yaml.resolveMapItem	typeref:typename:interface{}
value	vendor/gopkg.in/yaml.v3/yamlh.go	/^	value []byte$/;"	m	struct:yaml.yaml_event_t	typeref:typename:[]byte
value	vendor/gopkg.in/yaml.v3/yamlh.go	/^	value []byte$/;"	m	struct:yaml.yaml_token_t	typeref:typename:[]byte
value	vendor/gopkg.in/yaml.v3/yamlh.go	/^	value int \/\/ The value of the element.$/;"	m	struct:yaml.yaml_node_pair_t	typeref:typename:int
valueSortLess	vendor/github.com/davecgh/go-spew/spew/common.go	/^func valueSortLess(a, b reflect.Value) bool {$/;"	f	package:spew	typeref:typename:bool
values	vendor/github.com/davecgh/go-spew/spew/common.go	/^	values  []reflect.Value$/;"	m	struct:spew.valuesSorter	typeref:typename:[]reflect.Value
valuesSorter	vendor/github.com/davecgh/go-spew/spew/common.go	/^type valuesSorter struct {$/;"	s	package:spew
version_directive	vendor/gopkg.in/yaml.v3/yamlh.go	/^	version_directive *yaml_version_directive_t$/;"	m	struct:yaml.yaml_document_t	typeref:typename:*yaml_version_directive_t
version_directive	vendor/gopkg.in/yaml.v3/yamlh.go	/^	version_directive *yaml_version_directive_t$/;"	m	struct:yaml.yaml_event_t	typeref:typename:*yaml_version_directive_t
w	vendor/github.com/davecgh/go-spew/spew/dump.go	/^	w                io.Writer$/;"	m	struct:spew.dumpState	typeref:typename:io.Writer
whitespace	vendor/gopkg.in/yaml.v3/yamlh.go	/^	whitespace bool \/\/ If the last character was a whitespace?$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:bool
width	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^func width(b byte) int {$/;"	f	package:yaml	typeref:typename:int
write	vendor/gopkg.in/yaml.v3/emitterc.go	/^func write(emitter *yaml_emitter_t, s []byte, i *int) bool {$/;"	f	package:yaml	typeref:typename:bool
write_all	vendor/gopkg.in/yaml.v3/emitterc.go	/^func write_all(emitter *yaml_emitter_t, s []byte) bool {$/;"	f	package:yaml	typeref:typename:bool
write_break	vendor/gopkg.in/yaml.v3/emitterc.go	/^func write_break(emitter *yaml_emitter_t, s []byte, i *int) bool {$/;"	f	package:yaml	typeref:typename:bool
write_handler	vendor/gopkg.in/yaml.v3/yamlh.go	/^	write_handler yaml_write_handler_t \/\/ Write handler.$/;"	m	struct:yaml.yaml_emitter_t	typeref:typename:yaml_write_handler_t
yaml	vendor/github.com/stretchr/testify/assert/assertions.go	/^	yaml "gopkg.in\/yaml.v3"$/;"	P	package:gopkg.in/yaml.v3
yaml	vendor/gopkg.in/yaml.v3/apic.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/decode.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/emitterc.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/encode.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/parserc.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/readerc.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/resolve.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/scannerc.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/sorter.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/writerc.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/yaml.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/yamlh.go	/^package yaml$/;"	p
yaml	vendor/gopkg.in/yaml.v3/yamlprivateh.go	/^package yaml$/;"	p
yamlError	vendor/gopkg.in/yaml.v3/yaml.go	/^type yamlError struct {$/;"	s	package:yaml
yamlStyleFloat	vendor/gopkg.in/yaml.v3/resolve.go	/^var yamlStyleFloat = regexp.MustCompile(`^[-+]?(\\.[0-9]+|[0-9]+(\\.[0-9]*)?)([eE][-+]?[0-9]+)?$/;"	v	package:yaml
yaml_ALIAS_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_ALIAS_EVENT          \/\/ An ALIAS event.$/;"	c	package:yaml
yaml_ALIAS_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_ALIAS_TOKEN  \/\/ An ALIAS token.$/;"	c	package:yaml
yaml_ANCHOR_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_ANCHOR_TOKEN \/\/ An ANCHOR token.$/;"	c	package:yaml
yaml_ANY_BREAK	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_ANY_BREAK yaml_break_t = iota$/;"	c	package:yaml
yaml_ANY_ENCODING	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_ANY_ENCODING yaml_encoding_t = iota$/;"	c	package:yaml
yaml_ANY_MAPPING_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_ANY_MAPPING_STYLE yaml_mapping_style_t = iota$/;"	c	package:yaml
yaml_ANY_SCALAR_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_ANY_SCALAR_STYLE yaml_scalar_style_t = 0$/;"	c	package:yaml
yaml_ANY_SEQUENCE_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_ANY_SEQUENCE_STYLE yaml_sequence_style_t = iota$/;"	c	package:yaml
yaml_BINARY_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_BINARY_TAG = "tag:yaml.org,2002:binary"$/;"	c	package:yaml
yaml_BLOCK_END_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_BLOCK_END_TOKEN            \/\/ A BLOCK-END token.$/;"	c	package:yaml
yaml_BLOCK_ENTRY_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_BLOCK_ENTRY_TOKEN \/\/ A BLOCK-ENTRY token.$/;"	c	package:yaml
yaml_BLOCK_MAPPING_START_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_BLOCK_MAPPING_START_TOKEN  \/\/ A BLOCK-SEQUENCE-END token.$/;"	c	package:yaml
yaml_BLOCK_MAPPING_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_BLOCK_MAPPING_STYLE \/\/ The block mapping style.$/;"	c	package:yaml
yaml_BLOCK_SEQUENCE_START_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_BLOCK_SEQUENCE_START_TOKEN \/\/ A BLOCK-SEQUENCE-START token.$/;"	c	package:yaml
yaml_BLOCK_SEQUENCE_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_BLOCK_SEQUENCE_STYLE \/\/ The block sequence style.$/;"	c	package:yaml
yaml_BOOL_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_BOOL_TAG      = "tag:yaml.org,2002:bool"      \/\/ The tag !!bool with the values: true an/;"	c	package:yaml
yaml_COMPOSER_ERROR	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_COMPOSER_ERROR \/\/ Cannot compose a YAML document.$/;"	c	package:yaml
yaml_CRLN_BREAK	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_CRLN_BREAK \/\/ Use CR LN for line breaks (DOS style).$/;"	c	package:yaml
yaml_CR_BREAK	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_CR_BREAK   \/\/ Use CR for line breaks (Mac style).$/;"	c	package:yaml
yaml_DEFAULT_MAPPING_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_DEFAULT_MAPPING_TAG  = yaml_MAP_TAG \/\/ The default mapping tag is !!map.$/;"	c	package:yaml
yaml_DEFAULT_SCALAR_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_DEFAULT_SCALAR_TAG   = yaml_STR_TAG \/\/ The default scalar tag is !!str.$/;"	c	package:yaml
yaml_DEFAULT_SEQUENCE_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_DEFAULT_SEQUENCE_TAG = yaml_SEQ_TAG \/\/ The default sequence tag is !!seq.$/;"	c	package:yaml
yaml_DOCUMENT_END_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_DOCUMENT_END_EVENT   \/\/ A DOCUMENT-END event.$/;"	c	package:yaml
yaml_DOCUMENT_END_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_DOCUMENT_END_TOKEN      \/\/ A DOCUMENT-END token.$/;"	c	package:yaml
yaml_DOCUMENT_START_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_DOCUMENT_START_EVENT \/\/ A DOCUMENT-START event.$/;"	c	package:yaml
yaml_DOCUMENT_START_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_DOCUMENT_START_TOKEN    \/\/ A DOCUMENT-START token.$/;"	c	package:yaml
yaml_DOUBLE_QUOTED_SCALAR_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_DOUBLE_QUOTED_SCALAR_STYLE                                 \/\/ The double-quoted scalar s/;"	c	package:yaml
yaml_EMITTER_ERROR	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMITTER_ERROR  \/\/ Cannot emit a YAML stream.$/;"	c	package:yaml
yaml_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE    \/\/ Expect the first key of a block mapping.$/;"	c	package:yaml
yaml_EMIT_BLOCK_MAPPING_KEY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_BLOCK_MAPPING_KEY_STATE          \/\/ Expect the key of a block mapping.$/;"	c	package:yaml
yaml_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE \/\/ Expect a value for a simple key of a block mapp/;"	c	package:yaml
yaml_EMIT_BLOCK_MAPPING_VALUE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_BLOCK_MAPPING_VALUE_STATE        \/\/ Expect a value of a block mapping.$/;"	c	package:yaml
yaml_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE  \/\/ Expect the first item of a block sequence.$/;"	c	package:yaml
yaml_EMIT_BLOCK_SEQUENCE_ITEM_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_BLOCK_SEQUENCE_ITEM_STATE        \/\/ Expect an item of a block sequence.$/;"	c	package:yaml
yaml_EMIT_DOCUMENT_CONTENT_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_DOCUMENT_CONTENT_STATE           \/\/ Expect the content of a document.$/;"	c	package:yaml
yaml_EMIT_DOCUMENT_END_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_DOCUMENT_END_STATE               \/\/ Expect DOCUMENT-END.$/;"	c	package:yaml
yaml_EMIT_DOCUMENT_START_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_DOCUMENT_START_STATE             \/\/ Expect DOCUMENT-START or STREAM-END.$/;"	c	package:yaml
yaml_EMIT_END_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_END_STATE                        \/\/ Expect nothing.$/;"	c	package:yaml
yaml_EMIT_FIRST_DOCUMENT_START_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_FIRST_DOCUMENT_START_STATE       \/\/ Expect the first DOCUMENT-START or STREAM-END.$/;"	c	package:yaml
yaml_EMIT_FLOW_MAPPING_FIRST_KEY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_FLOW_MAPPING_FIRST_KEY_STATE     \/\/ Expect the first key of a flow mapping.$/;"	c	package:yaml
yaml_EMIT_FLOW_MAPPING_KEY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_FLOW_MAPPING_KEY_STATE           \/\/ Expect a key of a flow mapping.$/;"	c	package:yaml
yaml_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE  \/\/ Expect a value for a simple key of a flow mappi/;"	c	package:yaml
yaml_EMIT_FLOW_MAPPING_TRAIL_KEY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_FLOW_MAPPING_TRAIL_KEY_STATE     \/\/ Expect the next key of a flow mapping, with the/;"	c	package:yaml
yaml_EMIT_FLOW_MAPPING_VALUE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_FLOW_MAPPING_VALUE_STATE         \/\/ Expect a value of a flow mapping.$/;"	c	package:yaml
yaml_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE   \/\/ Expect the first item of a flow sequence.$/;"	c	package:yaml
yaml_EMIT_FLOW_SEQUENCE_ITEM_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_FLOW_SEQUENCE_ITEM_STATE         \/\/ Expect an item of a flow sequence.$/;"	c	package:yaml
yaml_EMIT_FLOW_SEQUENCE_TRAIL_ITEM_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_FLOW_SEQUENCE_TRAIL_ITEM_STATE   \/\/ Expect the next item of a flow sequence, with t/;"	c	package:yaml
yaml_EMIT_STREAM_START_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_EMIT_STREAM_START_STATE yaml_emitter_state_t = iota$/;"	c	package:yaml
yaml_FLOAT_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_FLOAT_TAG     = "tag:yaml.org,2002:float"     \/\/ The tag !!float for float values.$/;"	c	package:yaml
yaml_FLOW_ENTRY_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_FLOW_ENTRY_TOKEN  \/\/ A FLOW-ENTRY token.$/;"	c	package:yaml
yaml_FLOW_MAPPING_END_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_FLOW_MAPPING_END_TOKEN    \/\/ A FLOW-MAPPING-END token.$/;"	c	package:yaml
yaml_FLOW_MAPPING_START_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_FLOW_MAPPING_START_TOKEN  \/\/ A FLOW-MAPPING-START token.$/;"	c	package:yaml
yaml_FLOW_MAPPING_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_FLOW_MAPPING_STYLE  \/\/ The flow mapping style.$/;"	c	package:yaml
yaml_FLOW_SEQUENCE_END_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_FLOW_SEQUENCE_END_TOKEN   \/\/ A FLOW-SEQUENCE-END token.$/;"	c	package:yaml
yaml_FLOW_SEQUENCE_START_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_FLOW_SEQUENCE_START_TOKEN \/\/ A FLOW-SEQUENCE-START token.$/;"	c	package:yaml
yaml_FLOW_SEQUENCE_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_FLOW_SEQUENCE_STYLE  \/\/ The flow sequence style.$/;"	c	package:yaml
yaml_FOLDED_SCALAR_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_FOLDED_SCALAR_STYLE                                        \/\/ The folded scalar style.$/;"	c	package:yaml
yaml_INT_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_INT_TAG       = "tag:yaml.org,2002:int"       \/\/ The tag !!int for integer values.$/;"	c	package:yaml
yaml_KEY_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_KEY_TOKEN         \/\/ A KEY token.$/;"	c	package:yaml
yaml_LITERAL_SCALAR_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_LITERAL_SCALAR_STYLE                                       \/\/ The literal scalar style.$/;"	c	package:yaml
yaml_LN_BREAK	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_LN_BREAK   \/\/ Use LN for line breaks (Unix style).$/;"	c	package:yaml
yaml_MAPPING_END_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_MAPPING_END_EVENT    \/\/ A MAPPING-END event.$/;"	c	package:yaml
yaml_MAPPING_NODE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_MAPPING_NODE  \/\/ A mapping node.$/;"	c	package:yaml
yaml_MAPPING_START_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_MAPPING_START_EVENT  \/\/ A MAPPING-START event.$/;"	c	package:yaml
yaml_MAP_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_MAP_TAG = "tag:yaml.org,2002:map" \/\/ The tag !!map is used to denote mapping.$/;"	c	package:yaml
yaml_MEMORY_ERROR	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_MEMORY_ERROR   \/\/ Cannot allocate or reallocate a block of memory.$/;"	c	package:yaml
yaml_MERGE_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_MERGE_TAG  = "tag:yaml.org,2002:merge"$/;"	c	package:yaml
yaml_NO_ERROR	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_NO_ERROR yaml_error_type_t = iota$/;"	c	package:yaml
yaml_NO_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_NO_EVENT yaml_event_type_t = iota$/;"	c	package:yaml
yaml_NO_NODE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_NO_NODE yaml_node_type_t = iota$/;"	c	package:yaml
yaml_NO_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_NO_TOKEN yaml_token_type_t = iota$/;"	c	package:yaml
yaml_NULL_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_NULL_TAG      = "tag:yaml.org,2002:null"      \/\/ The tag !!null with the only possible v/;"	c	package:yaml
yaml_PARSER_ERROR	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSER_ERROR   \/\/ Cannot parse the input stream.$/;"	c	package:yaml
yaml_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE           \/\/ Expect the first key of a block mapping/;"	c	package:yaml
yaml_PARSE_BLOCK_MAPPING_KEY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_BLOCK_MAPPING_KEY_STATE                 \/\/ Expect a block mapping key.$/;"	c	package:yaml
yaml_PARSE_BLOCK_MAPPING_VALUE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_BLOCK_MAPPING_VALUE_STATE               \/\/ Expect a block mapping value.$/;"	c	package:yaml
yaml_PARSE_BLOCK_NODE_OR_INDENTLESS_SEQUENCE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_BLOCK_NODE_OR_INDENTLESS_SEQUENCE_STATE \/\/ Expect a block node or indentless seque/;"	c	package:yaml
yaml_PARSE_BLOCK_NODE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_BLOCK_NODE_STATE                        \/\/ Expect a block node.$/;"	c	package:yaml
yaml_PARSE_BLOCK_SEQUENCE_ENTRY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_BLOCK_SEQUENCE_ENTRY_STATE              \/\/ Expect an entry of a block sequence.$/;"	c	package:yaml
yaml_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE        \/\/ Expect the first entry of a block seque/;"	c	package:yaml
yaml_PARSE_DOCUMENT_CONTENT_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_DOCUMENT_CONTENT_STATE                  \/\/ Expect the content of a document.$/;"	c	package:yaml
yaml_PARSE_DOCUMENT_END_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_DOCUMENT_END_STATE                      \/\/ Expect DOCUMENT-END.$/;"	c	package:yaml
yaml_PARSE_DOCUMENT_START_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_DOCUMENT_START_STATE                    \/\/ Expect DOCUMENT-START.$/;"	c	package:yaml
yaml_PARSE_END_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_END_STATE                               \/\/ Expect nothing.$/;"	c	package:yaml
yaml_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE          \/\/ Expect an empty value of a flow mapping/;"	c	package:yaml
yaml_PARSE_FLOW_MAPPING_FIRST_KEY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_FLOW_MAPPING_FIRST_KEY_STATE            \/\/ Expect the first key of a flow mapping.$/;"	c	package:yaml
yaml_PARSE_FLOW_MAPPING_KEY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_FLOW_MAPPING_KEY_STATE                  \/\/ Expect a key of a flow mapping.$/;"	c	package:yaml
yaml_PARSE_FLOW_MAPPING_VALUE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_FLOW_MAPPING_VALUE_STATE                \/\/ Expect a value of a flow mapping.$/;"	c	package:yaml
yaml_PARSE_FLOW_NODE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_FLOW_NODE_STATE                         \/\/ Expect a flow node.$/;"	c	package:yaml
yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE   \/\/ Expect the and of an ordered mapping en/;"	c	package:yaml
yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE   \/\/ Expect a key of an ordered mapping.$/;"	c	package:yaml
yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE \/\/ Expect a value of an ordered mapping.$/;"	c	package:yaml
yaml_PARSE_FLOW_SEQUENCE_ENTRY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_FLOW_SEQUENCE_ENTRY_STATE               \/\/ Expect an entry of a flow sequence.$/;"	c	package:yaml
yaml_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE         \/\/ Expect the first entry of a flow sequen/;"	c	package:yaml
yaml_PARSE_IMPLICIT_DOCUMENT_START_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_IMPLICIT_DOCUMENT_START_STATE           \/\/ Expect the beginning of an implicit doc/;"	c	package:yaml
yaml_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE         \/\/ Expect an entry of an indentless sequen/;"	c	package:yaml
yaml_PARSE_STREAM_START_STATE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PARSE_STREAM_START_STATE yaml_parser_state_t = iota$/;"	c	package:yaml
yaml_PLAIN_SCALAR_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_PLAIN_SCALAR_STYLE         yaml_scalar_style_t = 1 << iota \/\/ The plain scalar style.$/;"	c	package:yaml
yaml_READER_ERROR	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_READER_ERROR   \/\/ Cannot read or decode the input stream.$/;"	c	package:yaml
yaml_SCALAR_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_SCALAR_EVENT         \/\/ A SCALAR event.$/;"	c	package:yaml
yaml_SCALAR_NODE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_SCALAR_NODE   \/\/ A scalar node.$/;"	c	package:yaml
yaml_SCALAR_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_SCALAR_TOKEN \/\/ A SCALAR token.$/;"	c	package:yaml
yaml_SCANNER_ERROR	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_SCANNER_ERROR  \/\/ Cannot scan the input stream.$/;"	c	package:yaml
yaml_SEQUENCE_END_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_SEQUENCE_END_EVENT   \/\/ A SEQUENCE-END event.$/;"	c	package:yaml
yaml_SEQUENCE_NODE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_SEQUENCE_NODE \/\/ A sequence node.$/;"	c	package:yaml
yaml_SEQUENCE_START_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_SEQUENCE_START_EVENT \/\/ A SEQUENCE-START event.$/;"	c	package:yaml
yaml_SEQ_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_SEQ_TAG = "tag:yaml.org,2002:seq" \/\/ The tag !!seq is used to denote sequences.$/;"	c	package:yaml
yaml_SINGLE_QUOTED_SCALAR_STYLE	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_SINGLE_QUOTED_SCALAR_STYLE                                 \/\/ The single-quoted scalar s/;"	c	package:yaml
yaml_STREAM_END_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_STREAM_END_EVENT     \/\/ A STREAM-END event.$/;"	c	package:yaml
yaml_STREAM_END_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_STREAM_END_TOKEN   \/\/ A STREAM-END token.$/;"	c	package:yaml
yaml_STREAM_START_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_STREAM_START_EVENT   \/\/ A STREAM-START event.$/;"	c	package:yaml
yaml_STREAM_START_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_STREAM_START_TOKEN \/\/ A STREAM-START token.$/;"	c	package:yaml
yaml_STR_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_STR_TAG       = "tag:yaml.org,2002:str"       \/\/ The tag !!str for string values.$/;"	c	package:yaml
yaml_TAG_DIRECTIVE_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_TAG_DIRECTIVE_TOKEN     \/\/ A TAG-DIRECTIVE token.$/;"	c	package:yaml
yaml_TAG_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_TAG_TOKEN    \/\/ A TAG token.$/;"	c	package:yaml
yaml_TAIL_COMMENT_EVENT	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_TAIL_COMMENT_EVENT$/;"	c	package:yaml
yaml_TIMESTAMP_TAG	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_TIMESTAMP_TAG = "tag:yaml.org,2002:timestamp" \/\/ The tag !!timestamp for date and time v/;"	c	package:yaml
yaml_UTF16BE_ENCODING	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_UTF16BE_ENCODING \/\/ The UTF-16-BE encoding with BOM.$/;"	c	package:yaml
yaml_UTF16LE_ENCODING	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_UTF16LE_ENCODING \/\/ The UTF-16-LE encoding with BOM.$/;"	c	package:yaml
yaml_UTF8_ENCODING	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_UTF8_ENCODING    \/\/ The default UTF-8 encoding.$/;"	c	package:yaml
yaml_VALUE_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_VALUE_TOKEN       \/\/ A VALUE token.$/;"	c	package:yaml
yaml_VERSION_DIRECTIVE_TOKEN	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_VERSION_DIRECTIVE_TOKEN \/\/ A VERSION-DIRECTIVE token.$/;"	c	package:yaml
yaml_WRITER_ERROR	vendor/gopkg.in/yaml.v3/yamlh.go	/^	yaml_WRITER_ERROR   \/\/ Cannot write to the output stream.$/;"	c	package:yaml
yaml_alias_data_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_alias_data_t struct {$/;"	s	package:yaml
yaml_alias_event_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_alias_event_initialize(event *yaml_event_t, anchor []byte) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_break_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_break_t int$/;"	t	package:yaml
yaml_comment_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_comment_t struct {$/;"	s	package:yaml
yaml_document_end_event_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_document_end_event_initialize(event *yaml_event_t, implicit bool) {$/;"	f	package:yaml
yaml_document_start_event_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_document_start_event_initialize($/;"	f	package:yaml
yaml_document_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_document_t struct {$/;"	s	package:yaml
yaml_emitter_analyze_anchor	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_analyze_anchor(emitter *yaml_emitter_t, anchor []byte, alias bool) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_analyze_event	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_analyze_event(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_analyze_scalar	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_analyze_scalar(emitter *yaml_emitter_t, value []byte) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_analyze_tag	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_analyze_tag(emitter *yaml_emitter_t, tag []byte) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_analyze_tag_directive	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_analyze_tag_directive(emitter *yaml_emitter_t, tag_directive *yaml_tag_directi/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_analyze_version_directive	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_analyze_version_directive(emitter *yaml_emitter_t, version_directive *yaml_ver/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_append_tag_directive	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_append_tag_directive(emitter *yaml_emitter_t, value *yaml_tag_directive_t, all/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_check_empty_document	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_check_empty_document(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_check_empty_mapping	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_check_empty_mapping(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_check_empty_sequence	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_check_empty_sequence(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_check_simple_key	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_check_simple_key(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_delete	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_emitter_delete(emitter *yaml_emitter_t) {$/;"	f	package:yaml
yaml_emitter_emit	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_alias	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_alias(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_block_mapping_key	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_block_mapping_key(emitter *yaml_emitter_t, event *yaml_event_t, first boo/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_block_mapping_value	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_block_mapping_value(emitter *yaml_emitter_t, event *yaml_event_t, simple /;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_block_sequence_item	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_block_sequence_item(emitter *yaml_emitter_t, event *yaml_event_t, first b/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_document_content	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_document_content(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_document_end	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_document_end(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_document_start	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_document_start(emitter *yaml_emitter_t, event *yaml_event_t, first bool) /;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_flow_mapping_key	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_flow_mapping_key(emitter *yaml_emitter_t, event *yaml_event_t, first, tra/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_flow_mapping_value	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_flow_mapping_value(emitter *yaml_emitter_t, event *yaml_event_t, simple b/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_flow_sequence_item	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_flow_sequence_item(emitter *yaml_emitter_t, event *yaml_event_t, first, t/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_mapping_start	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_mapping_start(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_node	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_node(emitter *yaml_emitter_t, event *yaml_event_t,$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_scalar	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_scalar(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_sequence_start	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_sequence_start(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_emit_stream_start	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_emit_stream_start(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_flush	vendor/gopkg.in/yaml.v3/writerc.go	/^func yaml_emitter_flush(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_increase_indent	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_increase_indent(emitter *yaml_emitter_t, flow, indentless bool) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_emitter_initialize(emitter *yaml_emitter_t) {$/;"	f	package:yaml
yaml_emitter_need_more_events	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_need_more_events(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_process_anchor	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_process_anchor(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_process_foot_comment	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_process_foot_comment(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_process_head_comment	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_process_head_comment(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_process_line_comment	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_process_line_comment(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_process_scalar	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_process_scalar(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_process_tag	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_process_tag(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_select_scalar_style	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_select_scalar_style(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_set_break	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_emitter_set_break(emitter *yaml_emitter_t, line_break yaml_break_t) {$/;"	f	package:yaml
yaml_emitter_set_canonical	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_emitter_set_canonical(emitter *yaml_emitter_t, canonical bool) {$/;"	f	package:yaml
yaml_emitter_set_emitter_error	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_set_emitter_error(emitter *yaml_emitter_t, problem string) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_set_encoding	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_emitter_set_encoding(emitter *yaml_emitter_t, encoding yaml_encoding_t) {$/;"	f	package:yaml
yaml_emitter_set_indent	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_emitter_set_indent(emitter *yaml_emitter_t, indent int) {$/;"	f	package:yaml
yaml_emitter_set_output_string	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_emitter_set_output_string(emitter *yaml_emitter_t, output_buffer *[]byte) {$/;"	f	package:yaml
yaml_emitter_set_output_writer	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_emitter_set_output_writer(emitter *yaml_emitter_t, w io.Writer) {$/;"	f	package:yaml
yaml_emitter_set_unicode	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_emitter_set_unicode(emitter *yaml_emitter_t, unicode bool) {$/;"	f	package:yaml
yaml_emitter_set_width	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_emitter_set_width(emitter *yaml_emitter_t, width int) {$/;"	f	package:yaml
yaml_emitter_set_writer_error	vendor/gopkg.in/yaml.v3/writerc.go	/^func yaml_emitter_set_writer_error(emitter *yaml_emitter_t, problem string) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_silent_nil_event	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_silent_nil_event(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_state_machine	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_state_machine(emitter *yaml_emitter_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_state_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_emitter_state_t int$/;"	t	package:yaml
yaml_emitter_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_emitter_t struct {$/;"	s	package:yaml
yaml_emitter_write_anchor	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_anchor(emitter *yaml_emitter_t, value []byte) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_block_scalar_hints	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_block_scalar_hints(emitter *yaml_emitter_t, value []byte) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_bom	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_bom(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_comment	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_comment(emitter *yaml_emitter_t, comment []byte) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_double_quoted_scalar	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_double_quoted_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_folded_scalar	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_folded_scalar(emitter *yaml_emitter_t, value []byte) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_indent	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_indent(emitter *yaml_emitter_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_indicator	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_indicator(emitter *yaml_emitter_t, indicator []byte, need_whitespace, is/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_literal_scalar	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_literal_scalar(emitter *yaml_emitter_t, value []byte) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_plain_scalar	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_plain_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks bool) b/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_single_quoted_scalar	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_single_quoted_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_tag_content	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_tag_content(emitter *yaml_emitter_t, value []byte, need_whitespace bool)/;"	f	package:yaml	typeref:typename:bool
yaml_emitter_write_tag_handle	vendor/gopkg.in/yaml.v3/emitterc.go	/^func yaml_emitter_write_tag_handle(emitter *yaml_emitter_t, value []byte) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_encoding_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_encoding_t int$/;"	t	package:yaml
yaml_error_type_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_error_type_t int$/;"	t	package:yaml
yaml_event_delete	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_event_delete(event *yaml_event_t) {$/;"	f	package:yaml
yaml_event_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_event_t struct {$/;"	s	package:yaml
yaml_event_type_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_event_type_t int8$/;"	t	package:yaml
yaml_insert_token	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_insert_token(parser *yaml_parser_t, pos int, token *yaml_token_t) {$/;"	f	package:yaml
yaml_mapping_end_event_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_mapping_end_event_initialize(event *yaml_event_t) {$/;"	f	package:yaml
yaml_mapping_start_event_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_mapping_start_event_initialize(event *yaml_event_t, anchor, tag []byte, implicit bool,/;"	f	package:yaml
yaml_mapping_style_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_mapping_style_t yaml_style_t$/;"	t	package:yaml
yaml_mark_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_mark_t struct {$/;"	s	package:yaml
yaml_node_item_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_node_item_t int$/;"	t	package:yaml
yaml_node_pair_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_node_pair_t struct {$/;"	s	package:yaml
yaml_node_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_node_t struct {$/;"	s	package:yaml
yaml_node_type_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_node_type_t int$/;"	t	package:yaml
yaml_parser_append_tag_directive	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_append_tag_directive(parser *yaml_parser_t, value yaml_tag_directive_t, allow_d/;"	f	package:yaml	typeref:typename:bool
yaml_parser_decrease_flow_level	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_decrease_flow_level(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_delete	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_parser_delete(parser *yaml_parser_t) {$/;"	f	package:yaml
yaml_parser_determine_encoding	vendor/gopkg.in/yaml.v3/readerc.go	/^func yaml_parser_determine_encoding(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_anchor	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_anchor(parser *yaml_parser_t, typ yaml_token_type_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_block_entry	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_block_entry(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_block_scalar	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_block_scalar(parser *yaml_parser_t, literal bool) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_directive	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_directive(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_document_indicator	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_document_indicator(parser *yaml_parser_t, typ yaml_token_type_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_flow_collection_end	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_flow_collection_end(parser *yaml_parser_t, typ yaml_token_type_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_flow_collection_start	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_flow_collection_start(parser *yaml_parser_t, typ yaml_token_type_t) bool /;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_flow_entry	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_flow_entry(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_flow_scalar	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_flow_scalar(parser *yaml_parser_t, single bool) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_key	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_key(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_more_tokens	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_more_tokens(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_next_token	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_next_token(parser *yaml_parser_t) (ok bool) {$/;"	f	package:yaml	typeref:typename:(ok bool)
yaml_parser_fetch_plain_scalar	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_plain_scalar(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_stream_end	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_stream_end(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_stream_start	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_stream_start(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_tag	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_tag(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_fetch_value	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_fetch_value(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_increase_flow_level	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_increase_flow_level(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_parser_initialize(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse(parser *yaml_parser_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_block_mapping_key	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_block_mapping_key(parser *yaml_parser_t, event *yaml_event_t, first bool)/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_block_mapping_value	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_block_mapping_value(parser *yaml_parser_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_block_sequence_entry	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_block_sequence_entry(parser *yaml_parser_t, event *yaml_event_t, first bo/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_document_content	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_document_content(parser *yaml_parser_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_document_end	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_document_end(parser *yaml_parser_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_document_start	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_document_start(parser *yaml_parser_t, event *yaml_event_t, implicit bool)/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_flow_mapping_key	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_flow_mapping_key(parser *yaml_parser_t, event *yaml_event_t, first bool) /;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_flow_mapping_value	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_flow_mapping_value(parser *yaml_parser_t, event *yaml_event_t, empty bool/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_flow_sequence_entry	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_flow_sequence_entry(parser *yaml_parser_t, event *yaml_event_t, first boo/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_flow_sequence_entry_mapping_end	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_flow_sequence_entry_mapping_end(parser *yaml_parser_t, event *yaml_event_/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_flow_sequence_entry_mapping_key	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_flow_sequence_entry_mapping_key(parser *yaml_parser_t, event *yaml_event_/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_flow_sequence_entry_mapping_value	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_flow_sequence_entry_mapping_value(parser *yaml_parser_t, event *yaml_even/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_indentless_sequence_entry	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_indentless_sequence_entry(parser *yaml_parser_t, event *yaml_event_t) boo/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_node	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_node(parser *yaml_parser_t, event *yaml_event_t, block, indentless_sequen/;"	f	package:yaml	typeref:typename:bool
yaml_parser_parse_stream_start	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_parse_stream_start(parser *yaml_parser_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_process_directives	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_process_directives(parser *yaml_parser_t,$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_process_empty_scalar	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_process_empty_scalar(parser *yaml_parser_t, event *yaml_event_t, mark yaml_mark/;"	f	package:yaml	typeref:typename:bool
yaml_parser_remove_simple_key	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_remove_simple_key(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_roll_indent	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_roll_indent(parser *yaml_parser_t, column, number int, typ yaml_token_type_t, m/;"	f	package:yaml	typeref:typename:bool
yaml_parser_save_simple_key	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_save_simple_key(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan(parser *yaml_parser_t, token *yaml_token_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_anchor	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_anchor(parser *yaml_parser_t, token *yaml_token_t, typ yaml_token_type_t) /;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_block_scalar	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_block_scalar(parser *yaml_parser_t, token *yaml_token_t, literal bool) boo/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_block_scalar_breaks	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_block_scalar_breaks(parser *yaml_parser_t, indent *int, breaks *[]byte, st/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_comments	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_comments(parser *yaml_parser_t, scan_mark yaml_mark_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_directive	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_directive(parser *yaml_parser_t, token *yaml_token_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_directive_name	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_directive_name(parser *yaml_parser_t, start_mark yaml_mark_t, name *[]byte/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_flow_scalar	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_flow_scalar(parser *yaml_parser_t, token *yaml_token_t, single bool) bool /;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_line_comment	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_line_comment(parser *yaml_parser_t, token_mark yaml_mark_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_plain_scalar	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_plain_scalar(parser *yaml_parser_t, token *yaml_token_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_tag	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_tag(parser *yaml_parser_t, token *yaml_token_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_tag_directive_value	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_tag_directive_value(parser *yaml_parser_t, start_mark yaml_mark_t, handle,/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_tag_handle	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_tag_handle(parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, /;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_tag_uri	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_tag_uri(parser *yaml_parser_t, directive bool, head []byte, start_mark yam/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_to_next_token	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_to_next_token(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_uri_escapes	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_uri_escapes(parser *yaml_parser_t, directive bool, start_mark yaml_mark_t,/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_version_directive_number	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_version_directive_number(parser *yaml_parser_t, start_mark yaml_mark_t, nu/;"	f	package:yaml	typeref:typename:bool
yaml_parser_scan_version_directive_value	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_scan_version_directive_value(parser *yaml_parser_t, start_mark yaml_mark_t, maj/;"	f	package:yaml	typeref:typename:bool
yaml_parser_set_encoding	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_parser_set_encoding(parser *yaml_parser_t, encoding yaml_encoding_t) {$/;"	f	package:yaml
yaml_parser_set_event_comments	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_set_event_comments(parser *yaml_parser_t, event *yaml_event_t) {$/;"	f	package:yaml
yaml_parser_set_input_reader	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_parser_set_input_reader(parser *yaml_parser_t, r io.Reader) {$/;"	f	package:yaml
yaml_parser_set_input_string	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_parser_set_input_string(parser *yaml_parser_t, input []byte) {$/;"	f	package:yaml
yaml_parser_set_parser_error	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_set_parser_error(parser *yaml_parser_t, problem string, problem_mark yaml_mark_/;"	f	package:yaml	typeref:typename:bool
yaml_parser_set_parser_error_context	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_set_parser_error_context(parser *yaml_parser_t, context string, context_mark ya/;"	f	package:yaml	typeref:typename:bool
yaml_parser_set_reader_error	vendor/gopkg.in/yaml.v3/readerc.go	/^func yaml_parser_set_reader_error(parser *yaml_parser_t, problem string, offset int, value int) /;"	f	package:yaml	typeref:typename:bool
yaml_parser_set_scanner_error	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_set_scanner_error(parser *yaml_parser_t, context string, context_mark yaml_mark/;"	f	package:yaml	typeref:typename:bool
yaml_parser_set_scanner_tag_error	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_set_scanner_tag_error(parser *yaml_parser_t, directive bool, context_mark yaml_/;"	f	package:yaml	typeref:typename:bool
yaml_parser_split_stem_comment	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_split_stem_comment(parser *yaml_parser_t, stem_len int) {$/;"	f	package:yaml
yaml_parser_state_machine	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_state_machine(parser *yaml_parser_t, event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_state_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_parser_state_t int$/;"	t	package:yaml
yaml_parser_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_parser_t struct {$/;"	s	package:yaml
yaml_parser_unfold_comments	vendor/gopkg.in/yaml.v3/parserc.go	/^func yaml_parser_unfold_comments(parser *yaml_parser_t, token *yaml_token_t) {$/;"	f	package:yaml
yaml_parser_unroll_indent	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_parser_unroll_indent(parser *yaml_parser_t, column int, scan_mark yaml_mark_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_update_buffer	vendor/gopkg.in/yaml.v3/readerc.go	/^func yaml_parser_update_buffer(parser *yaml_parser_t, length int) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_parser_update_raw_buffer	vendor/gopkg.in/yaml.v3/readerc.go	/^func yaml_parser_update_raw_buffer(parser *yaml_parser_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_read_handler_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_read_handler_t func(parser *yaml_parser_t, buffer []byte) (n int, err error)$/;"	t	package:yaml
yaml_reader_read_handler	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_reader_read_handler(parser *yaml_parser_t, buffer []byte) (n int, err error) {$/;"	f	package:yaml	typeref:typename:(n int, err error)
yaml_scalar_event_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_scalar_event_initialize(event *yaml_event_t, anchor, tag, value []byte, plain_implicit/;"	f	package:yaml	typeref:typename:bool
yaml_scalar_style_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_scalar_style_t yaml_style_t$/;"	t	package:yaml
yaml_sequence_end_event_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_sequence_end_event_initialize(event *yaml_event_t) bool {$/;"	f	package:yaml	typeref:typename:bool
yaml_sequence_start_event_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_sequence_start_event_initialize(event *yaml_event_t, anchor, tag []byte, implicit bool/;"	f	package:yaml	typeref:typename:bool
yaml_sequence_style_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_sequence_style_t yaml_style_t$/;"	t	package:yaml
yaml_simple_key_is_valid	vendor/gopkg.in/yaml.v3/scannerc.go	/^func yaml_simple_key_is_valid(parser *yaml_parser_t, simple_key *yaml_simple_key_t) (valid, ok b/;"	f	package:yaml	typeref:typename:(valid, ok bool)
yaml_simple_key_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_simple_key_t struct {$/;"	s	package:yaml
yaml_stream_end_event_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_stream_end_event_initialize(event *yaml_event_t) {$/;"	f	package:yaml
yaml_stream_start_event_initialize	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_stream_start_event_initialize(event *yaml_event_t, encoding yaml_encoding_t) {$/;"	f	package:yaml
yaml_string_read_handler	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_string_read_handler(parser *yaml_parser_t, buffer []byte) (n int, err error) {$/;"	f	package:yaml	typeref:typename:(n int, err error)
yaml_string_write_handler	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_string_write_handler(emitter *yaml_emitter_t, buffer []byte) error {$/;"	f	package:yaml	typeref:typename:error
yaml_style_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_style_t int8$/;"	t	package:yaml
yaml_tag_directive_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_tag_directive_t struct {$/;"	s	package:yaml
yaml_token_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_token_t struct {$/;"	s	package:yaml
yaml_token_type_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_token_type_t int$/;"	t	package:yaml
yaml_version_directive_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_version_directive_t struct {$/;"	s	package:yaml
yaml_write_handler_t	vendor/gopkg.in/yaml.v3/yamlh.go	/^type yaml_write_handler_t func(emitter *yaml_emitter_t, buffer []byte) error$/;"	t	package:yaml
yaml_writer_write_handler	vendor/gopkg.in/yaml.v3/apic.go	/^func yaml_writer_write_handler(emitter *yaml_emitter_t, buffer []byte) error {$/;"	f	package:yaml	typeref:typename:error
zeroValue	vendor/gopkg.in/yaml.v3/decode.go	/^var zeroValue reflect.Value$/;"	v	package:yaml
